// <auto-generated/>
using Marqeta.Core.Sdk.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Marqeta.Core.Sdk.Rewardprograms.Redemptions {
    /// <summary>
    /// Builds and executes requests for operations under \rewardprograms\redemptions
    /// </summary>
    public class RedemptionsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="RedemptionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RedemptionsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rewardprograms/redemptions?settlement_end_date={settlement_end_date}&settlement_start_date={settlement_start_date}{&count*,destination*,start_index*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="RedemptionsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public RedemptionsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rewardprograms/redemptions?settlement_end_date={settlement_end_date}&settlement_start_date={settlement_start_date}{&count*,destination*,start_index*}", rawUrl)
        {
        }
        /// <summary>
        /// retrieves all completed redemptions by settlement date
        /// </summary>
        /// <returns>A <see cref="RedemptionsBySettlementDatePage"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="ApiError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<RedemptionsBySettlementDatePage?> GetAsync(Action<RequestConfiguration<RedemptionsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<RedemptionsBySettlementDatePage> GetAsync(Action<RequestConfiguration<RedemptionsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"XXX", ApiError.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<RedemptionsBySettlementDatePage>(requestInfo, RedemptionsBySettlementDatePage.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// retrieves all completed redemptions by settlement date
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<RedemptionsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<RedemptionsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="RedemptionsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public RedemptionsRequestBuilder WithUrl(string rawUrl)
        {
            return new RedemptionsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// retrieves all completed redemptions by settlement date
        /// </summary>
        public class RedemptionsRequestBuilderGetQueryParameters 
        {
            /// <summary>Number of resources to retrieve.</summary>
            [QueryParameter("count")]
            public int? Count { get; set; }
            /// <summary>Specifies the destination for external redemptions to filter for.</summary>
            [QueryParameter("destination")]
            public DestinationType? Destination { get; set; }
            /// <summary>Settlement end date to filter by.</summary>
            [QueryParameter("settlement_end_date")]
            public DateTimeOffset? SettlementEndDate { get; set; }
            /// <summary>Settlement start date to filter by.</summary>
            [QueryParameter("settlement_start_date")]
            public DateTimeOffset? SettlementStartDate { get; set; }
            /// <summary>Sort order index of the first resource in the returned array.</summary>
            [QueryParameter("start_index")]
            public long? StartIndex { get; set; }
        }
    }
}
