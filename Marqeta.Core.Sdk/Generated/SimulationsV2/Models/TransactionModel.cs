// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.SimulationsV2.Models
{
    /// <summary>
    /// Contains information about the transaction.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TransactionModel : IAdditionalDataHolder, IParsable
    {
        /// <summary>Information used when funding an account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request? AccountFunding { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request AccountFunding { get; set; }
#endif
        /// <summary>The account_name_verification property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_name_verification_model? AccountNameVerification { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_name_verification_model AccountNameVerification { get; set; }
#endif
        /// <summary>Indicates the amount of the acquirer fee.Account holders are sometimes charged an acquirer fee for card use at ATMs, fuel dispensers, and so on.</summary>
        public double? AcquirerFeeAmount { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount of the transaction.</summary>
        public double? Amount { get; set; }
        /// <summary>Amount to released following a financial advice.</summary>
        public double? AmountToBeReleased { get; set; }
        /// <summary>Contains information about the merchant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Transaction_card_acceptor? CardAcceptor { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Transaction_card_acceptor CardAcceptor { get; set; }
#endif
        /// <summary>Unique identifier of the card.Useful when a single account holder has multiple cards.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardToken { get; set; }
#nullable restore
#else
        public string CardToken { get; set; }
#endif
        /// <summary>The cashback amount requested.</summary>
        public double? CashBackAmount { get; set; }
        /// <summary>Date and time when the Marqeta platform created the transaction entry, in UTC format.For example, when Marqeta processed the clearing record for a refund.</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>The three-digit ISO 4217 currency code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>Contains information from the card network about currency conversion, including the original currency of the transaction, the amount of the transaction in the origination currency, and the conversion rate.Returned if the transaction involves currency conversion.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion? CurrencyConversion { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion CurrencyConversion { get; set; }
#endif
        /// <summary>List of fees associated with the transaction.This array is returned if it exists in the resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model>? Fees { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model> Fees { get; set; }
#endif
        /// <summary>Contains one or more fraud determinations by the card network that apply to either the transaction or the cardholder&apos;s account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Fraud_view? Fraud { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Fraud_view Fraud { get; set; }
#endif
        /// <summary>Contains information about the GPA balances and pending credits.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_gpa? Gpa { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_gpa Gpa { get; set; }
#endif
        /// <summary>Contains information about a GPA order, including fees, funding sources, and addresses.See &lt;&lt;/core-api/gpa-orders, GPA Orders&gt;&gt; for more information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Gpa_response? GpaOrder { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Gpa_response GpaOrder { get; set; }
#endif
        /// <summary>Indicates which card network was used to complete the transaction.</summary>
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_network? Network { get; set; }
        /// <summary>Contains information about an original credit transaction (OCT), which enables the cardholder to receive funds on the specified card from an external source via the card network.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit? OriginalCredit { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit OriginalCredit { get; set; }
#endif
        /// <summary>Returned for final transaction types.Unique identifier of the preceding related transaction.Useful for identifying the transaction that preceded the current one.For example, `authorization`, a temporary transaction type, precedes and is completed by `authorization.clearing`, a final transaction type.In this case, the `authorization` token is returned with this field. See &lt;&lt;/core-api/event-types#_transaction_events, Transaction events&gt;&gt; for details on which transaction types are temporary or final.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrecedingRelatedTransactionToken { get; set; }
#nullable restore
#else
        public string PrecedingRelatedTransactionToken { get; set; }
#endif
        /// <summary>Merchant-requested amount, including any fees.This includes amount and cashback amount.</summary>
        public double? RequestAmount { get; set; }
        /// <summary>Contains the Marqeta platform&apos;s assertion as to whether its address verification data matches that provided by the cardholder.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Response? Response { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Response Response { get; set; }
#endif
        /// <summary>Date and time when funds were moved for a transaction, in UTC.For example, in the case of a refund, when funds were credited to the cardholder.</summary>
        public DateTimeOffset? SettlementDate { get; set; }
        /// <summary>Current state of the transaction.For more information about the `state` field, see &lt;&lt;/developer-guides/about-transactions#_the_transaction_lifecycle, The transaction lifecycle&gt;&gt;.</summary>
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_state? State { get; set; }
        /// <summary>Indicates which subnetwork used to complete the transaction.</summary>
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_subnetwork? Subnetwork { get; set; }
        /// <summary>Unique identifier of the transaction, formatted as a UUID.*NOTE:* For subsequent related transactions, this token value appears as the `preceding_related_transaction_token`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; private set; }
#nullable restore
#else
        public string Token { get; private set; }
#endif
        /// <summary>Transaction event type.For more information about the `type` field, see &lt;&lt;/core-api/event-types#_transaction_events, Transaction events&gt;&gt;.</summary>
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_type? Type { get; private set; }
        /// <summary>Unique identifier of the user who owns the account that funded the transaction; subsequent related transactions retain the same `user_token` even if the card used to complete the transaction moves to another user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>Date and time when the user initiated the transaction, in UTC.For example, when a merchant performed the original authorization for a refund.</summary>
        public DateTimeOffset? UserTransactionTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel"/> and sets the default values.
        /// </summary>
        public TransactionModel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_funding", n => { AccountFunding = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request.CreateFromDiscriminatorValue); } },
                { "account_name_verification", n => { AccountNameVerification = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_name_verification_model>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_name_verification_model.CreateFromDiscriminatorValue); } },
                { "acquirer_fee_amount", n => { AcquirerFeeAmount = n.GetDoubleValue(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "amount_to_be_released", n => { AmountToBeReleased = n.GetDoubleValue(); } },
                { "card_acceptor", n => { CardAcceptor = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Transaction_card_acceptor>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Transaction_card_acceptor.CreateFromDiscriminatorValue); } },
                { "card_token", n => { CardToken = n.GetStringValue(); } },
                { "cash_back_amount", n => { CashBackAmount = n.GetDoubleValue(); } },
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                { "currency_conversion", n => { CurrencyConversion = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion.CreateFromDiscriminatorValue); } },
                { "fees", n => { Fees = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model.CreateFromDiscriminatorValue)?.AsList(); } },
                { "fraud", n => { Fraud = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Fraud_view>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Fraud_view.CreateFromDiscriminatorValue); } },
                { "gpa", n => { Gpa = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_gpa>(global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_gpa.CreateFromDiscriminatorValue); } },
                { "gpa_order", n => { GpaOrder = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Gpa_response>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Gpa_response.CreateFromDiscriminatorValue); } },
                { "network", n => { Network = n.GetEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_network>(); } },
                { "original_credit", n => { OriginalCredit = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit.CreateFromDiscriminatorValue); } },
                { "preceding_related_transaction_token", n => { PrecedingRelatedTransactionToken = n.GetStringValue(); } },
                { "request_amount", n => { RequestAmount = n.GetDoubleValue(); } },
                { "response", n => { Response = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Response>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Response.CreateFromDiscriminatorValue); } },
                { "settlement_date", n => { SettlementDate = n.GetDateTimeOffsetValue(); } },
                { "state", n => { State = n.GetEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_state>(); } },
                { "subnetwork", n => { Subnetwork = n.GetEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_subnetwork>(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_type>(); } },
                { "user_token", n => { UserToken = n.GetStringValue(); } },
                { "user_transaction_time", n => { UserTransactionTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request>("account_funding", AccountFunding);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_name_verification_model>("account_name_verification", AccountNameVerification);
            writer.WriteDoubleValue("acquirer_fee_amount", AcquirerFeeAmount);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteDoubleValue("amount_to_be_released", AmountToBeReleased);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Transaction_card_acceptor>("card_acceptor", CardAcceptor);
            writer.WriteStringValue("card_token", CardToken);
            writer.WriteDoubleValue("cash_back_amount", CashBackAmount);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion>("currency_conversion", CurrencyConversion);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model>("fees", Fees);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Fraud_view>("fraud", Fraud);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_gpa>("gpa", Gpa);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Gpa_response>("gpa_order", GpaOrder);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_network>("network", Network);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit>("original_credit", OriginalCredit);
            writer.WriteStringValue("preceding_related_transaction_token", PrecedingRelatedTransactionToken);
            writer.WriteDoubleValue("request_amount", RequestAmount);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Response>("response", Response);
            writer.WriteDateTimeOffsetValue("settlement_date", SettlementDate);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_state>("state", State);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.TransactionModel_subnetwork>("subnetwork", Subnetwork);
            writer.WriteStringValue("user_token", UserToken);
            writer.WriteDateTimeOffsetValue("user_transaction_time", UserTransactionTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
