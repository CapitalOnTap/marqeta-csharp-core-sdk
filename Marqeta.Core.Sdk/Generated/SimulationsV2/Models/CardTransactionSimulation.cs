// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.SimulationsV2.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CardTransactionSimulation : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Information used when funding an account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request? AccountFunding { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request AccountFunding { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Contains attributes that govern card usage</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Card_options? CardOptions { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Card_options CardOptions { get; set; }
#endif
        /// <summary>The cashback amount requested.</summary>
        public double? CashBackAmount { get; set; }
        /// <summary>Currency type of the transaction.</summary>
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_currency_code? CurrencyCode { get; set; }
        /// <summary>Contains information from the card network about currency conversion, including the original currency of the transaction, the amount of the transaction in the origination currency, and the conversion rate.Returned if the transaction involves currency conversion.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion? CurrencyConversion { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion CurrencyConversion { get; set; }
#endif
        /// <summary>The event_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventType { get; private set; }
#nullable restore
#else
        public string EventType { get; private set; }
#endif
        /// <summary>List of fees associated with the transaction.This array is returned if it exists in the resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model>? Fees { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model> Fees { get; set; }
#endif
        /// <summary>Set to `true` to simulate a forced clearing transaction.*NOTE:* If you set this field to `true`, you must also set the `original_transaction_token` field to an existing transaction token (the transaction does not need to be related).</summary>
        public bool? ForcePost { get; set; }
        /// <summary>Indicates if the transaction is a pre-authorization.Set to `true` to mark the amount as an authorization only.</summary>
        public bool? IsPreauthorization { get; set; }
        /// <summary>Indicates which card network was used to complete the transaction.</summary>
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_network? Network { get; set; }
        /// <summary>Contains information about an original credit transaction (OCT), which enables the cardholder to receive funds on the specified card from an external source via the card network.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit? OriginalCredit { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit OriginalCredit { get; set; }
#endif
        /// <summary>Contains information about the point of sale, including details on how the card was presented.May be returned if the request uses Transaction Model v2 of the Marqeta Core API.Not returned for Transaction model v1 requests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Pos? Pos { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.Pos Pos { get; set; }
#endif
        /// <summary>Indicates which subnetwork used to complete the transaction.</summary>
        public global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_sub_network? SubNetwork { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation"/> and sets the default values.
        /// </summary>
        public CardTransactionSimulation()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("event_type")?.GetStringValue();
            return mappingValue switch
            {
                "account.funding.authorization" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AccountFundingAuthorizationEvent(),
                "account.funding.authorization.clearing" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AccountFundingAuthorizationClearingEvent(),
                "account.funding.authorization.reversal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AccountFundingAuthorizationReversalEvent(),
                "account.funding.auth_plus_capture" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AccountFundingAuthPlusCaptureEvent(),
                "account.funding.auth_plus_capture.reversal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AccountFundingAuthPlusCaptureReversalEvent(),
                "authorization" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationEvent(),
                "authorization.advice" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationAdviceEvent(),
                "authorization.atm.withdrawal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationAtmWithdrawalEvent(),
                "authorization.cashback" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationCashbackEvent(),
                "authorization.clearing" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationClearingEvent(),
                "authorization.clearing.atm.withdrawal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationClearingAtmWithdrawalEvent(),
                "authorization.clearing.quasi.cash" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationClearingQuasiCashEvent(),
                "authorization.incremental" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationIncrementalEvent(),
                "authorization.quasi.cash" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationQuasiCashEvent(),
                "authorization.reversal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.AuthorizationReversalEvent(),
                "original.credit.authorization" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.OriginalCreditAuthorizationEvent(),
                "original.credit.authorization.clearing" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.OriginalCreditAuthorizationClearingEvent(),
                "original.credit.auth_plus_capture" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.OriginalCreditAuthPlusCaptureEvent(),
                "original.credit.auth_plus_capture.reversal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.OriginalCreditAuthPlusCaptureReversalEvent(),
                "pindebit" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitEvent(),
                "pindebit.atm.withdrawal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitAtmWithdrawalEvent(),
                "pindebit.authorization" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitAuthorizationEvent(),
                "pindebit.authorization.clearing" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitAuthorizationClearingEvent(),
                "pindebit.authorization.reversal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitAuthorizationReversalEvent(),
                "pindebit.balanceinquiry" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitBalanceinquiryEvent(),
                "pindebit.cashback" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitCashbackEvent(),
                "pindebit.quasi.cash" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitQuasiCashEvent(),
                "pindebit.refund" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.PindebitRefundEvent(),
                "refund" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.RefundEvent(),
                "refund.authorization" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.RefundAuthorizationEvent(),
                "refund.authorization.clearing" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.RefundAuthorizationClearingEvent(),
                "refund.authorization.reversal" => new global::Marqeta.Core.Sdk.SimulationsV2.Models.RefundAuthorizationReversalEvent(),
                _ => new global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_funding", n => { AccountFunding = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request.CreateFromDiscriminatorValue); } },
                { "card_options", n => { CardOptions = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Card_options>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Card_options.CreateFromDiscriminatorValue); } },
                { "cash_back_amount", n => { CashBackAmount = n.GetDoubleValue(); } },
                { "currency_code", n => { CurrencyCode = n.GetEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_currency_code>(); } },
                { "currency_conversion", n => { CurrencyConversion = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion.CreateFromDiscriminatorValue); } },
                { "event_type", n => { EventType = n.GetStringValue(); } },
                { "fees", n => { Fees = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model.CreateFromDiscriminatorValue)?.AsList(); } },
                { "force_post", n => { ForcePost = n.GetBoolValue(); } },
                { "is_preauthorization", n => { IsPreauthorization = n.GetBoolValue(); } },
                { "network", n => { Network = n.GetEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_network>(); } },
                { "original_credit", n => { OriginalCredit = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit.CreateFromDiscriminatorValue); } },
                { "pos", n => { Pos = n.GetObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Pos>(global::Marqeta.Core.Sdk.SimulationsV2.Models.Pos.CreateFromDiscriminatorValue); } },
                { "sub_network", n => { SubNetwork = n.GetEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_sub_network>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Account_funding_request>("account_funding", AccountFunding);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Card_options>("card_options", CardOptions);
            writer.WriteDoubleValue("cash_back_amount", CashBackAmount);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_currency_code>("currency_code", CurrencyCode);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Currency_conversion>("currency_conversion", CurrencyConversion);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.SimulationsV2.Models.Network_fee_model>("fees", Fees);
            writer.WriteBoolValue("force_post", ForcePost);
            writer.WriteBoolValue("is_preauthorization", IsPreauthorization);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_network>("network", Network);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Original_credit>("original_credit", OriginalCredit);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.Pos>("pos", Pos);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.SimulationsV2.Models.CardTransactionSimulation_sub_network>("sub_network", SubNetwork);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
