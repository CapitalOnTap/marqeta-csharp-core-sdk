// <auto-generated/>
#pragma warning disable CS0618
using Marqeta.Core.Sdk.Digitalwallettokens.Card;
using Marqeta.Core.Sdk.Digitalwallettokens.Item;
using Marqeta.Core.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Marqeta.Core.Sdk.Digitalwallettokens
{
    /// <summary>
    /// Builds and executes requests for operations under \digitalwallettokens
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DigitalwallettokensRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The card property</summary>
        public global::Marqeta.Core.Sdk.Digitalwallettokens.Card.CardRequestBuilder Card
        {
            get => new global::Marqeta.Core.Sdk.Digitalwallettokens.Card.CardRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Marqeta.Core.Sdk.digitalwallettokens.item collection</summary>
        /// <param name="position">Unique identifier of the digital wallet token (DWT).</param>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Digitalwallettokens.Item.WithTokenItemRequestBuilder"/></returns>
        public global::Marqeta.Core.Sdk.Digitalwallettokens.Item.WithTokenItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("token", position);
                return new global::Marqeta.Core.Sdk.Digitalwallettokens.Item.WithTokenItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DigitalwallettokensRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/digitalwallettokens{?correlation_id*,count*,embed*,end_date*,fields*,pan_reference_id*,sort_by*,start_date*,start_index*,state*,token_reference_id*,token_requestor_name*,token_type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DigitalwallettokensRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/digitalwallettokens{?correlation_id*,count*,embed*,end_date*,fields*,pan_reference_id*,sort_by*,start_date*,start_index*,state*,token_reference_id*,token_requestor_name*,token_type*}", rawUrl)
        {
        }
        /// <summary>
        /// Use this endpoint to retrieve a list of digital wallet tokens.
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.DigitalWalletTokenListResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Marqeta.Core.Sdk.Models.ApiError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Marqeta.Core.Sdk.Models.DigitalWalletTokenListResponse?> GetAsync(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder.DigitalwallettokensRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Marqeta.Core.Sdk.Models.DigitalWalletTokenListResponse> GetAsync(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder.DigitalwallettokensRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Marqeta.Core.Sdk.Models.ApiError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Marqeta.Core.Sdk.Models.DigitalWalletTokenListResponse>(requestInfo, global::Marqeta.Core.Sdk.Models.DigitalWalletTokenListResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Use this endpoint to retrieve a list of digital wallet tokens.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder.DigitalwallettokensRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder.DigitalwallettokensRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Marqeta.Core.Sdk.Digitalwallettokens.DigitalwallettokensRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Use this endpoint to retrieve a list of digital wallet tokens.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DigitalwallettokensRequestBuilderGetQueryParameters 
        {
            /// <summary>Unique value representing a tokenization request (Mastercard only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("correlation_id")]
            public string? CorrelationId { get; set; }
#nullable restore
#else
            [QueryParameter("correlation_id")]
            public string CorrelationId { get; set; }
#endif
            /// <summary>Number of digital wallet token resources to retrieve.</summary>
            [QueryParameter("count")]
            public int? Count { get; set; }
            /// <summary>An optional embedded user object.</summary>
            [QueryParameter("embed")]
            public global::Marqeta.Core.Sdk.Digitalwallettokens.GetEmbedQueryParameterType? Embed { get; set; }
            /// <summary>Expiration date of the digital wallet token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("end_date")]
            public string? EndDate { get; set; }
#nullable restore
#else
            [QueryParameter("end_date")]
            public string EndDate { get; set; }
#endif
            /// <summary>Comma-delimited list of fields to return (`field_1,field_2`, and so on).Leave blank to return all fields.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string Fields { get; set; }
#endif
            /// <summary>Unique identifier of the digital wallet token primary account number (PAN) within the card network.This value may vary, depending on the digital wallet.For example, the `pan_reference_id` may be different in Apple Wallet and Google Wallet for the same digital wallet token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("pan_reference_id")]
            public string? PanReferenceId { get; set; }
#nullable restore
#else
            [QueryParameter("pan_reference_id")]
            public string PanReferenceId { get; set; }
#endif
            /// <summary>Field on which to sort.Use any field in the resource model, or one of the system fields `lastModifiedTime` or `createdTime`.Prefix the field name with a hyphen (`-`) to sort in descending order.Omit the hyphen to sort in ascending order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort_by")]
            public string? SortBy { get; set; }
#nullable restore
#else
            [QueryParameter("sort_by")]
            public string SortBy { get; set; }
#endif
            /// <summary>Date when the digital wallet token becomes active.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("start_date")]
            public string? StartDate { get; set; }
#nullable restore
#else
            [QueryParameter("start_date")]
            public string StartDate { get; set; }
#endif
            /// <summary>Sort order index of the first digital wallet token resource in the returned array.</summary>
            [QueryParameter("start_index")]
            public int? StartIndex { get; set; }
            /// <summary>Comma-delimited list of digital wallet token states to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("state")]
            public string? State { get; set; }
#nullable restore
#else
            [QueryParameter("state")]
            public string State { get; set; }
#endif
            /// <summary>Unique identifier of the digital wallet token within the card network.The `token_reference_id` is unique at the card network level.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("token_reference_id")]
            public string? TokenReferenceId { get; set; }
#nullable restore
#else
            [QueryParameter("token_reference_id")]
            public string TokenReferenceId { get; set; }
#endif
            /// <summary>Name of the token requestor within the card network.*NOTE:* The list of example values for this field is maintained by the card networks and is subject to change.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("token_requestor_name")]
            public string? TokenRequestorName { get; set; }
#nullable restore
#else
            [QueryParameter("token_requestor_name")]
            public string TokenRequestorName { get; set; }
#endif
            /// <summary>Comma-delimited list of digital wallet token types to display.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("token_type")]
            public string? TokenType { get; set; }
#nullable restore
#else
            [QueryParameter("token_type")]
            public string TokenType { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
