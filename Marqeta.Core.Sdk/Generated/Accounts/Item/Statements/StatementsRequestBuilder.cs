// <auto-generated/>
#pragma warning disable CS0618
using Marqeta.Core.Sdk.Accounts.Item.Statements.Files;
using Marqeta.Core.Sdk.Accounts.Item.Statements.Item;
using Marqeta.Core.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Marqeta.Core.Sdk.Accounts.Item.Statements
{
    /// <summary>
    /// Builds and executes requests for operations under \accounts\{account_token}\statements
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StatementsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The files property</summary>
        public global::Marqeta.Core.Sdk.Accounts.Item.Statements.Files.FilesRequestBuilder Files
        {
            get => new global::Marqeta.Core.Sdk.Accounts.Item.Statements.Files.FilesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Marqeta.Core.Sdk.accounts.item.statements.item collection</summary>
        /// <param name="position">Unique identifier of the statement summary to retrieve.Send a `GET` request to `/credit/accounts/{token}/statements/` to retrieve existing statement summary tokens.</param>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Accounts.Item.Statements.Item.WithStatement_summary_tokenItemRequestBuilder"/></returns>
        public global::Marqeta.Core.Sdk.Accounts.Item.Statements.Item.WithStatement_summary_tokenItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("statement_summary_token", position);
                return new global::Marqeta.Core.Sdk.Accounts.Item.Statements.Item.WithStatement_summary_tokenItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatementsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_token}/statements{?count*,end_date*,sort_by*,start_date*,start_index*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public StatementsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/accounts/{account_token}/statements{?count*,end_date*,sort_by*,start_date*,start_index*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve an array of statement summaries tied to a cardholder&apos;s account.The statement summary, which is a summary of account activity on a statement, provides account holders with a synopsis of activity that occurred on the account during a specified billing cycle.This endpoint supports &lt;&lt;/core-api/sorting-and-pagination, sorting and pagination&gt;&gt;.You can use optional query parameters to return a statement based on its exact opening or closing date, or a statement whose closing date falls within a range of dates.
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.StatementSummaryPage"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Marqeta.Core.Sdk.Models.ApiError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Marqeta.Core.Sdk.Models.StatementSummaryPage?> GetAsync(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder.StatementsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Marqeta.Core.Sdk.Models.StatementSummaryPage> GetAsync(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder.StatementsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Marqeta.Core.Sdk.Models.ApiError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Marqeta.Core.Sdk.Models.StatementSummaryPage>(requestInfo, global::Marqeta.Core.Sdk.Models.StatementSummaryPage.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve an array of statement summaries tied to a cardholder&apos;s account.The statement summary, which is a summary of account activity on a statement, provides account holders with a synopsis of activity that occurred on the account during a specified billing cycle.This endpoint supports &lt;&lt;/core-api/sorting-and-pagination, sorting and pagination&gt;&gt;.You can use optional query parameters to return a statement based on its exact opening or closing date, or a statement whose closing date falls within a range of dates.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder.StatementsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder.StatementsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Marqeta.Core.Sdk.Accounts.Item.Statements.StatementsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve an array of statement summaries tied to a cardholder&apos;s account.The statement summary, which is a summary of account activity on a statement, provides account holders with a synopsis of activity that occurred on the account during a specified billing cycle.This endpoint supports &lt;&lt;/core-api/sorting-and-pagination, sorting and pagination&gt;&gt;.You can use optional query parameters to return a statement based on its exact opening or closing date, or a statement whose closing date falls within a range of dates.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class StatementsRequestBuilderGetQueryParameters 
        {
            /// <summary>Number of account statement resources to retrieve.</summary>
            [QueryParameter("count")]
            public int? Count { get; set; }
            /// <summary>Returns statements with a matching closing date.If both `start_date` and `end_date` are specified, statements whose closing date falls between the start and end dates are returned.</summary>
            [QueryParameter("end_date")]
            public DateTimeOffset? EndDate { get; set; }
            /// <summary>Field on which to sort.Prefix the field name with a hyphen (`-`) to sort in descending order.Omit the hyphen to sort in ascending order.*NOTE:*You must sort using system field names such as `createdTime`, and not by the field names appearing in response bodies such as `created_time`.</summary>
            [QueryParameter("sort_by")]
            public global::Marqeta.Core.Sdk.Accounts.Item.Statements.GetSort_byQueryParameterType? SortBy { get; set; }
            /// <summary>Returns statements with a matching opening date.If both `start_date` and `end_date` are specified, statements whose closing date falls between the start and end dates are returned.</summary>
            [QueryParameter("start_date")]
            public DateTimeOffset? StartDate { get; set; }
            /// <summary>Sort order index of the first resource in the returned array.</summary>
            [QueryParameter("start_index")]
            public int? StartIndex { get; set; }
        }
    }
}
#pragma warning restore CS0618
