// <auto-generated/>
#pragma warning disable CS0618
using Marqeta.Core.Sdk.Bundles.Item.Clone;
using Marqeta.Core.Sdk.Bundles.Item.Lineage;
using Marqeta.Core.Sdk.Bundles.Item.Promote;
using Marqeta.Core.Sdk.Bundles.Item.Transitions;
using Marqeta.Core.Sdk.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Marqeta.Core.Sdk.Bundles.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \bundles\{token}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithTokenItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The clone property</summary>
        public global::Marqeta.Core.Sdk.Bundles.Item.Clone.CloneRequestBuilder Clone
        {
            get => new global::Marqeta.Core.Sdk.Bundles.Item.Clone.CloneRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The lineage property</summary>
        public global::Marqeta.Core.Sdk.Bundles.Item.Lineage.LineageRequestBuilder Lineage
        {
            get => new global::Marqeta.Core.Sdk.Bundles.Item.Lineage.LineageRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The promote property</summary>
        public global::Marqeta.Core.Sdk.Bundles.Item.Promote.PromoteRequestBuilder Promote
        {
            get => new global::Marqeta.Core.Sdk.Bundles.Item.Promote.PromoteRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The transitions property</summary>
        public global::Marqeta.Core.Sdk.Bundles.Item.Transitions.TransitionsRequestBuilder Transitions
        {
            get => new global::Marqeta.Core.Sdk.Bundles.Item.Transitions.TransitionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTokenItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bundles/{token}{?expand_objects*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithTokenItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bundles/{token}{?expand_objects*}", rawUrl)
        {
        }
        /// <summary>
        /// Retrieve a specific bundle.
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.BundleResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Marqeta.Core.Sdk.Models.ApiError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Marqeta.Core.Sdk.Models.BundleResponse?> GetAsync(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder.WithTokenItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Marqeta.Core.Sdk.Models.BundleResponse> GetAsync(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder.WithTokenItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Marqeta.Core.Sdk.Models.ApiError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Marqeta.Core.Sdk.Models.BundleResponse>(requestInfo, global::Marqeta.Core.Sdk.Models.BundleResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Update a specific bundle that is not `ACTIVE` or `ARCHIVED`.Bundles are created in a `DRAFT` state, and are still modifiable at this point.Using the transitions endpoint, a bundle can be transitioned from `DRAFT`, to `ACTIVE`.Once a bundle is active, it cannot be modified.
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.BundleResponse"/></returns>
        /// <param name="body">Specifies bundles for a credit program.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Marqeta.Core.Sdk.Models.ApiError">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Marqeta.Core.Sdk.Models.BundleResponse?> PutAsync(global::Marqeta.Core.Sdk.Models.BundleUpdateReq body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Marqeta.Core.Sdk.Models.BundleResponse> PutAsync(global::Marqeta.Core.Sdk.Models.BundleUpdateReq body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPutRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Marqeta.Core.Sdk.Models.ApiError.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Marqeta.Core.Sdk.Models.BundleResponse>(requestInfo, global::Marqeta.Core.Sdk.Models.BundleResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Retrieve a specific bundle.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder.WithTokenItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder.WithTokenItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Update a specific bundle that is not `ACTIVE` or `ARCHIVED`.Bundles are created in a `DRAFT` state, and are still modifiable at this point.Using the transitions endpoint, a bundle can be transitioned from `DRAFT`, to `ACTIVE`.Once a bundle is active, it cannot be modified.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Specifies bundles for a credit program.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(global::Marqeta.Core.Sdk.Models.BundleUpdateReq body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(global::Marqeta.Core.Sdk.Models.BundleUpdateReq body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Marqeta.Core.Sdk.Bundles.Item.WithTokenItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Retrieve a specific bundle.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithTokenItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Embeds the associated object of the specified type into the response.For more, see &lt;&lt;/core-api/object-expansion, object expansion&gt;&gt;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expand_objects")]
            public global::Marqeta.Core.Sdk.Models.PolicyType[]? ExpandObjects { get; set; }
#nullable restore
#else
            [QueryParameter("expand_objects")]
            public global::Marqeta.Core.Sdk.Models.PolicyType[] ExpandObjects { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
