// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains information relevant to creating substatus
    /// </summary>
    public class SubstatusCreateReq : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date when the sub status goes into effect, in UTC.</summary>
        public DateTimeOffset? EffectiveDate { get; set; }
        /// <summary>Reason for the substatus.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>The unique identifier of the user or account for which you want to create a substatus.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceToken { get; set; }
#nullable restore
#else
        public string ResourceToken { get; set; }
#endif
        /// <summary>Possible values: USER, ACCOUNT, BUSINESS</summary>
        public SubstatusCreateReq_resource_type? ResourceType { get; set; }
        /// <summary>Possible values: FRAUD, DECEASED, BANKRUPTCY, BANKRUPTCY_FILED, BANKRUPTCY_REAFFIRMED, BANKRUPTCY_WITHDRAWN, BANKRUPTCY_RESCINDED, BANKRUPTCY_DISCHARGED, HARDSHIP, MLA, SCRA</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Substatus { get; set; }
#nullable restore
#else
        public string Substatus { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="SubstatusCreateReq"/> and sets the default values.
        /// </summary>
        public SubstatusCreateReq() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="SubstatusCreateReq"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SubstatusCreateReq CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SubstatusCreateReq();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"effective_date", n => { EffectiveDate = n.GetDateTimeOffsetValue(); } },
                {"reason", n => { Reason = n.GetStringValue(); } },
                {"resource_token", n => { ResourceToken = n.GetStringValue(); } },
                {"resource_type", n => { ResourceType = n.GetEnumValue<SubstatusCreateReq_resource_type>(); } },
                {"substatus", n => { Substatus = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("effective_date", EffectiveDate);
            writer.WriteStringValue("reason", Reason);
            writer.WriteStringValue("resource_token", ResourceToken);
            writer.WriteEnumValue<SubstatusCreateReq_resource_type>("resource_type", ResourceType);
            writer.WriteStringValue("substatus", Substatus);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
