// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains information relevant to creating a substatus.
    /// </summary>
    public class SubstatusCreateReq : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Additional dynamic attributes related to the substatus.If the substatus is `BANKRUPTCY`, `SCRA` or `POWER_OF_ATTORNEY`, then attributes are required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Marqeta.Core.Sdk.Models.SubstatusCreateReq_attributes>? Attributes { get; set; }
#nullable restore
#else
        public List<Marqeta.Core.Sdk.Models.SubstatusCreateReq_attributes> Attributes { get; set; }
#endif
        /// <summary>List of events related to the substatus.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Marqeta.Core.Sdk.Models.SubstatusEvent>? Events { get; set; }
#nullable restore
#else
        public List<Marqeta.Core.Sdk.Models.SubstatusEvent> Events { get; set; }
#endif
        /// <summary>Unique identifier of the user or account for which you want to create a substatus.Send a `GET` request to `/credit/accounts` to retrieve existing account tokens.Send a `GET` request to `/users` to retrieve existing user tokens.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceToken { get; set; }
#nullable restore
#else
        public string ResourceToken { get; set; }
#endif
        /// <summary>Type of resource to which the substatus applies.</summary>
        public Marqeta.Core.Sdk.Models.SubstatusCreateReq_resource_type? ResourceType { get; set; }
        /// <summary>Type of substatus.`HARDSHIP`, `FRAUD` can only be applied to the `ACCOUNT` resource type.`MLA`, `SCRA`, `DECEASED`, `BANKRUPTCY`, and `POWER_OF_ATTORNEY` can only be applied to the `USER` resource type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Substatus { get; set; }
#nullable restore
#else
        public string Substatus { get; set; }
#endif
        /// <summary>Unique identifier of the credit substatus.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.SubstatusCreateReq"/> and sets the default values.
        /// </summary>
        public SubstatusCreateReq()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.SubstatusCreateReq"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.SubstatusCreateReq CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.SubstatusCreateReq();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "attributes", n => { Attributes = n.GetCollectionOfObjectValues<Marqeta.Core.Sdk.Models.SubstatusCreateReq_attributes>(Marqeta.Core.Sdk.Models.SubstatusCreateReq_attributes.CreateFromDiscriminatorValue)?.ToList(); } },
                { "events", n => { Events = n.GetCollectionOfObjectValues<Marqeta.Core.Sdk.Models.SubstatusEvent>(Marqeta.Core.Sdk.Models.SubstatusEvent.CreateFromDiscriminatorValue)?.ToList(); } },
                { "resource_token", n => { ResourceToken = n.GetStringValue(); } },
                { "resource_type", n => { ResourceType = n.GetEnumValue<Marqeta.Core.Sdk.Models.SubstatusCreateReq_resource_type>(); } },
                { "substatus", n => { Substatus = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<Marqeta.Core.Sdk.Models.SubstatusCreateReq_attributes>("attributes", Attributes);
            writer.WriteCollectionOfObjectValues<Marqeta.Core.Sdk.Models.SubstatusEvent>("events", Events);
            writer.WriteStringValue("resource_token", ResourceToken);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.SubstatusCreateReq_resource_type>("resource_type", ResourceType);
            writer.WriteStringValue("substatus", Substatus);
            writer.WriteStringValue("token", Token);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
