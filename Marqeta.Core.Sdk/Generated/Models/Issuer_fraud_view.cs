// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains one or more fraud determinations by the card network that apply to either the transaction or the cardholder&apos;s account.
    /// </summary>
    public class Issuer_fraud_view : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The fraud_score_reasons property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FraudScoreReasons { get; set; }
#nullable restore
#else
        public List<string> FraudScoreReasons { get; set; }
#endif
        /// <summary>The action recommended based on the fraud score.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RecommendedAction { get; set; }
#nullable restore
#else
        public string RecommendedAction { get; set; }
#endif
        /// <summary>The RiskControl tags that were triggered by the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Marqeta.Core.Sdk.Models.Riskcontrol_tags>? RiskcontrolTags { get; set; }
#nullable restore
#else
        public List<Marqeta.Core.Sdk.Models.Riskcontrol_tags> RiskcontrolTags { get; set; }
#endif
        /// <summary>The fraud rating, or level of risk associated with the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RiskLevel { get; set; }
#nullable restore
#else
        public string RiskLevel { get; set; }
#endif
        /// <summary>The rules violated by the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RuleViolations { get; set; }
#nullable restore
#else
        public List<string> RuleViolations { get; set; }
#endif
        /// <summary>The risk score generated by RiskControl.This is either the Mastercard Decision Intelligence or Visa Advance Authorization transaction risk score.</summary>
        public int? Score { get; set; }
        /// <summary>Provides a list of rules triggered by a fraud event, along with the information on tags and rule characteristics.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Marqeta.Core.Sdk.Models.Triggered_rule>? TriggeredRules { get; set; }
#nullable restore
#else
        public List<Marqeta.Core.Sdk.Models.Triggered_rule> TriggeredRules { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Issuer_fraud_view"/> and sets the default values.
        /// </summary>
        public Issuer_fraud_view()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Issuer_fraud_view"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Issuer_fraud_view CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Issuer_fraud_view();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "fraud_score_reasons", n => { FraudScoreReasons = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "recommended_action", n => { RecommendedAction = n.GetStringValue(); } },
                { "risk_level", n => { RiskLevel = n.GetStringValue(); } },
                { "riskcontrol_tags", n => { RiskcontrolTags = n.GetCollectionOfObjectValues<Marqeta.Core.Sdk.Models.Riskcontrol_tags>(Marqeta.Core.Sdk.Models.Riskcontrol_tags.CreateFromDiscriminatorValue)?.ToList(); } },
                { "rule_violations", n => { RuleViolations = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "score", n => { Score = n.GetIntValue(); } },
                { "triggered_rules", n => { TriggeredRules = n.GetCollectionOfObjectValues<Marqeta.Core.Sdk.Models.Triggered_rule>(Marqeta.Core.Sdk.Models.Triggered_rule.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("fraud_score_reasons", FraudScoreReasons);
            writer.WriteStringValue("recommended_action", RecommendedAction);
            writer.WriteCollectionOfObjectValues<Marqeta.Core.Sdk.Models.Riskcontrol_tags>("riskcontrol_tags", RiskcontrolTags);
            writer.WriteStringValue("risk_level", RiskLevel);
            writer.WriteCollectionOfPrimitiveValues<string>("rule_violations", RuleViolations);
            writer.WriteIntValue("score", Score);
            writer.WriteCollectionOfObjectValues<Marqeta.Core.Sdk.Models.Triggered_rule>("triggered_rules", TriggeredRules);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
