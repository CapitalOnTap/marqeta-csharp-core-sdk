// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains information on the rules defined for a reward program.
    /// </summary>
    public class PolicyRewardRuleFilters : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Contains information on the minimum and maximum amounts that the balance for a billing cycle can be to earn the reward.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AmountFilter? Amount { get; set; }
#nullable restore
#else
        public AmountFilter Amount { get; set; }
#endif
        /// <summary>Contains information on the dynamic merchant category code (MCC) for a reward.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MccDynamicFilter? MccDynamic { get; set; }
#nullable restore
#else
        public MccDynamicFilter MccDynamic { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PolicyRewardRuleFilters"/> and sets the default values.
        /// </summary>
        public PolicyRewardRuleFilters() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PolicyRewardRuleFilters"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PolicyRewardRuleFilters CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PolicyRewardRuleFilters();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"amount", n => { Amount = n.GetObjectValue<AmountFilter>(AmountFilter.CreateFromDiscriminatorValue); } },
                {"mcc_dynamic", n => { MccDynamic = n.GetObjectValue<MccDynamicFilter>(MccDynamicFilter.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AmountFilter>("amount", Amount);
            writer.WriteObjectValue<MccDynamicFilter>("mcc_dynamic", MccDynamic);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
