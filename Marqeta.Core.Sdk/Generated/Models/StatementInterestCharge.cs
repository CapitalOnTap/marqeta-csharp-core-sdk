// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains information on statement interest charges.
    /// </summary>
    public class StatementInterestCharge : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount of interest calculated for the billing period.</summary>
        public double? Amount { get; set; }
        /// <summary>Type of APR.</summary>
        public Marqeta.Core.Sdk.Models.StatementInterestCharge_apr_type? AprType { get; set; }
        /// <summary>Annual percentage rate.</summary>
        public double? AprValue { get; set; }
        /// <summary>Average daily balance used to calculate interest.</summary>
        public double? BalanceSubjectToInterestRate { get; set; }
        /// <summary>Type of balance.* `PURCHASE` - The balance on purchases.</summary>
        public Marqeta.Core.Sdk.Models.StatementInterestCharge_balance_type? BalanceType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.StatementInterestCharge"/> and sets the default values.
        /// </summary>
        public StatementInterestCharge()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.StatementInterestCharge"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.StatementInterestCharge CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.StatementInterestCharge();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "apr_type", n => { AprType = n.GetEnumValue<Marqeta.Core.Sdk.Models.StatementInterestCharge_apr_type>(); } },
                { "apr_value", n => { AprValue = n.GetDoubleValue(); } },
                { "balance_subject_to_interest_rate", n => { BalanceSubjectToInterestRate = n.GetDoubleValue(); } },
                { "balance_type", n => { BalanceType = n.GetEnumValue<Marqeta.Core.Sdk.Models.StatementInterestCharge_balance_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.StatementInterestCharge_apr_type>("apr_type", AprType);
            writer.WriteDoubleValue("apr_value", AprValue);
            writer.WriteDoubleValue("balance_subject_to_interest_rate", BalanceSubjectToInterestRate);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.StatementInterestCharge_balance_type>("balance_type", BalanceType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
