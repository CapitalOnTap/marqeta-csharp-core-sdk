// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    public class Account_funding : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The funding_source property</summary>
        public Account_funding_funding_source? FundingSource { get; set; }
        /// <summary>The receiver_account_type property</summary>
        public Account_funding_receiver_account_type? ReceiverAccountType { get; set; }
        /// <summary>The receiver_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceiverName { get; set; }
#nullable restore
#else
        public string ReceiverName { get; set; }
#endif
        /// <summary>The screening_score property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ScreeningScore { get; set; }
#nullable restore
#else
        public string ScreeningScore { get; set; }
#endif
        /// <summary>The transaction_purpose property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionPurpose { get; set; }
#nullable restore
#else
        public string TransactionPurpose { get; set; }
#endif
        /// <summary>The transaction_type property</summary>
        public Account_funding_transaction_type? TransactionType { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Account_funding"/> and sets the default values.
        /// </summary>
        public Account_funding() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Account_funding"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Account_funding CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Account_funding();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"funding_source", n => { FundingSource = n.GetEnumValue<Account_funding_funding_source>(); } },
                {"receiver_account_type", n => { ReceiverAccountType = n.GetEnumValue<Account_funding_receiver_account_type>(); } },
                {"receiver_name", n => { ReceiverName = n.GetStringValue(); } },
                {"screening_score", n => { ScreeningScore = n.GetStringValue(); } },
                {"transaction_purpose", n => { TransactionPurpose = n.GetStringValue(); } },
                {"transaction_type", n => { TransactionType = n.GetEnumValue<Account_funding_transaction_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Account_funding_funding_source>("funding_source", FundingSource);
            writer.WriteEnumValue<Account_funding_receiver_account_type>("receiver_account_type", ReceiverAccountType);
            writer.WriteStringValue("receiver_name", ReceiverName);
            writer.WriteStringValue("screening_score", ScreeningScore);
            writer.WriteStringValue("transaction_purpose", TransactionPurpose);
            writer.WriteEnumValue<Account_funding_transaction_type>("transaction_type", TransactionType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
