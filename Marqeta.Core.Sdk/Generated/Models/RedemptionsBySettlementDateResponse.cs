// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Return redemptions.
    /// </summary>
    public class RedemptionsBySettlementDateResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>token of account the redemption is for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountToken { get; set; }
#nullable restore
#else
        public string AccountToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount property</summary>
        public decimal? Amount { get; set; }
        /// <summary>yyyy-MM-ddThh:mm:ssZ</summary>
        public DateTimeOffset? CompletionTime { get; set; }
        /// <summary>yyyy-MM-ddThh:mm:ssZ</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>Destination of the reward redemption.* `INVESTMENT` - The redemption is paid into an investment account.* `WALLET` - The redemption is paid into a digital wallet.* `ACH` - The redemption is paid into an ACH account.Required for external redemptions.</summary>
        public Marqeta.Core.Sdk.Models.DestinationType? Destination { get; set; }
        /// <summary>A note providing information on the reward redemption.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>Identifier of the redemption.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RedemptionToken { get; set; }
#nullable restore
#else
        public string RedemptionToken { get; set; }
#endif
        /// <summary>Token of reward program the redemption is for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RewardProgramToken { get; set; }
#nullable restore
#else
        public string RewardProgramToken { get; set; }
#endif
        /// <summary>Status of the redemption.If &lt;&lt;/core-api/reward-redemptions#postRedemptionTransition, transitioning the redemption&apos;s status&gt;&gt;:* `new_state` is the state to which you want to transition the redemption; must be `COMPLETED` or `RETURNED`.* `initial_status` is the initial status of the redemption prior to transition.</summary>
        public Marqeta.Core.Sdk.Models.RedemptionStatus? Status { get; set; }
        /// <summary>Type of redemption.* `EXTERNAL` - You issue the redemption on your external platform; Marqeta adjusts the reward program balance on the system of record.* `STATEMENT_CREDIT` - Marqeta issues the redemption as a statement credit on the associated account. +*NOTE*: This creates a new journal entry on the account and cannot be undone.* `ACH` - The reward redemption is issued as an ACH transfer to the receiving account.</summary>
        public Marqeta.Core.Sdk.Models.RedemptionType? Type { get; set; }
        /// <summary>yyyy-MM-ddThh:mm:ssZ</summary>
        public DateTimeOffset? UpdatedTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.RedemptionsBySettlementDateResponse"/> and sets the default values.
        /// </summary>
        public RedemptionsBySettlementDateResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.RedemptionsBySettlementDateResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.RedemptionsBySettlementDateResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.RedemptionsBySettlementDateResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_token", n => { AccountToken = n.GetStringValue(); } },
                { "amount", n => { Amount = n.GetDecimalValue(); } },
                { "completion_time", n => { CompletionTime = n.GetDateTimeOffsetValue(); } },
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "destination", n => { Destination = n.GetEnumValue<Marqeta.Core.Sdk.Models.DestinationType>(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "redemption_token", n => { RedemptionToken = n.GetStringValue(); } },
                { "reward_program_token", n => { RewardProgramToken = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<Marqeta.Core.Sdk.Models.RedemptionStatus>(); } },
                { "type", n => { Type = n.GetEnumValue<Marqeta.Core.Sdk.Models.RedemptionType>(); } },
                { "updated_time", n => { UpdatedTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_token", AccountToken);
            writer.WriteDecimalValue("amount", Amount);
            writer.WriteDateTimeOffsetValue("completion_time", CompletionTime);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.DestinationType>("destination", Destination);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("redemption_token", RedemptionToken);
            writer.WriteStringValue("reward_program_token", RewardProgramToken);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.RedemptionStatus>("status", Status);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.RedemptionType>("type", Type);
            writer.WriteDateTimeOffsetValue("updated_time", UpdatedTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
