// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// of the fraud object
    /// </summary>
    public class FraudFeedbackRequest : IAdditionalDataHolder, IParsable {
        /// <summary>This is the party making a call.</summary>
        public FraudFeedbackRequest_actor? Actor { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Amount { get; set; }
#nullable restore
#else
        public string Amount { get; set; }
#endif
        /// <summary>The is_fraud property</summary>
        public bool? IsFraud { get; set; }
        /// <summary>This is the value of the status of the fraud.</summary>
        public FraudFeedbackRequest_status? Status { get; set; }
        /// <summary>The transaction_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionToken { get; set; }
#nullable restore
#else
        public string TransactionToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="FraudFeedbackRequest"/> and sets the default values.
        /// </summary>
        public FraudFeedbackRequest() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FraudFeedbackRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FraudFeedbackRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FraudFeedbackRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"actor", n => { Actor = n.GetEnumValue<FraudFeedbackRequest_actor>(); } },
                {"amount", n => { Amount = n.GetStringValue(); } },
                {"is_fraud", n => { IsFraud = n.GetBoolValue(); } },
                {"status", n => { Status = n.GetEnumValue<FraudFeedbackRequest_status>(); } },
                {"transaction_token", n => { TransactionToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<FraudFeedbackRequest_actor>("actor", Actor);
            writer.WriteStringValue("amount", Amount);
            writer.WriteBoolValue("is_fraud", IsFraud);
            writer.WriteEnumValue<FraudFeedbackRequest_status>("status", Status);
            writer.WriteStringValue("transaction_token", TransactionToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
