// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    #pragma warning disable CS1591
    public class Fee_update_request : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Indicates whether the fee is active.</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount of the fee.</summary>
        public double? Amount { get; set; }
        /// <summary>The category property</summary>
        public Fee_update_request_category? Category { get; set; }
        /// <summary>Three-digit ISO 4217 currency code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>Describes the attributes of a fee.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Fee_attributes? FeeAttributes { get; set; }
#nullable restore
#else
        public Fee_attributes FeeAttributes { get; set; }
#endif
        /// <summary>Name of the fee request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Descriptive metadata about the fee.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tags { get; set; }
#nullable restore
#else
        public string Tags { get; set; }
#endif
        /// <summary>The type property</summary>
        public Fee_update_request_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Fee_update_request"/> and sets the default values.
        /// </summary>
        public Fee_update_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Fee_update_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Fee_update_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Fee_update_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"active", n => { Active = n.GetBoolValue(); } },
                {"amount", n => { Amount = n.GetDoubleValue(); } },
                {"category", n => { Category = n.GetEnumValue<Fee_update_request_category>(); } },
                {"currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                {"fee_attributes", n => { FeeAttributes = n.GetObjectValue<Fee_attributes>(Fee_attributes.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"tags", n => { Tags = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<Fee_update_request_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteEnumValue<Fee_update_request_category>("category", Category);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteObjectValue<Fee_attributes>("fee_attributes", FeeAttributes);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("tags", Tags);
            writer.WriteEnumValue<Fee_update_request_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
