// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Account documents response.
    /// </summary>
    public class AccountDocumentsResponse : IAdditionalDataHolder, IParsable {
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? AccountStatement { get; set; }
#nullable restore
#else
        public AccountDocumentResponse AccountStatement { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? BenefitsDisclosure { get; set; }
#nullable restore
#else
        public AccountDocumentResponse BenefitsDisclosure { get; set; }
#endif
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? CardMemberAgreement { get; set; }
#nullable restore
#else
        public AccountDocumentResponse CardMemberAgreement { get; set; }
#endif
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? EDisclosure { get; set; }
#nullable restore
#else
        public AccountDocumentResponse EDisclosure { get; set; }
#endif
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? PrivacyPolicy { get; set; }
#nullable restore
#else
        public AccountDocumentResponse PrivacyPolicy { get; set; }
#endif
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? RewardsDisclosure { get; set; }
#nullable restore
#else
        public AccountDocumentResponse RewardsDisclosure { get; set; }
#endif
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? SummaryOfCreditTerms { get; set; }
#nullable restore
#else
        public AccountDocumentResponse SummaryOfCreditTerms { get; set; }
#endif
        /// <summary>Account document response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AccountDocumentResponse? TermsSchedule { get; set; }
#nullable restore
#else
        public AccountDocumentResponse TermsSchedule { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="AccountDocumentsResponse"/> and sets the default values.
        /// </summary>
        public AccountDocumentsResponse() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AccountDocumentsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AccountDocumentsResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AccountDocumentsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"account_statement", n => { AccountStatement = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
                {"benefits_disclosure", n => { BenefitsDisclosure = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
                {"card_member_agreement", n => { CardMemberAgreement = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
                {"e_disclosure", n => { EDisclosure = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
                {"privacy_policy", n => { PrivacyPolicy = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
                {"rewards_disclosure", n => { RewardsDisclosure = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
                {"summary_of_credit_terms", n => { SummaryOfCreditTerms = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
                {"terms_schedule", n => { TermsSchedule = n.GetObjectValue<AccountDocumentResponse>(AccountDocumentResponse.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AccountDocumentResponse>("account_statement", AccountStatement);
            writer.WriteObjectValue<AccountDocumentResponse>("benefits_disclosure", BenefitsDisclosure);
            writer.WriteObjectValue<AccountDocumentResponse>("card_member_agreement", CardMemberAgreement);
            writer.WriteObjectValue<AccountDocumentResponse>("e_disclosure", EDisclosure);
            writer.WriteObjectValue<AccountDocumentResponse>("privacy_policy", PrivacyPolicy);
            writer.WriteObjectValue<AccountDocumentResponse>("rewards_disclosure", RewardsDisclosure);
            writer.WriteObjectValue<AccountDocumentResponse>("summary_of_credit_terms", SummaryOfCreditTerms);
            writer.WriteObjectValue<AccountDocumentResponse>("terms_schedule", TermsSchedule);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
