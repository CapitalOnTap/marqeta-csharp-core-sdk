// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains information held and provided by the digital wallet provider.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Wallet_provider_profile : IAdditionalDataHolder, IParsable
    {
        /// <summary>Contains information related to the cardholder and provided by the digital wallet provider.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Account? Account { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Account Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Score from the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceScore { get; set; }
#nullable restore
#else
        public string DeviceScore { get; set; }
#endif
        /// <summary>Source from which the digital wallet provider obtained the card primary account number (PAN).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PanSource { get; set; }
#nullable restore
#else
        public string PanSource { get; set; }
#endif
        /// <summary>Reason for the wallet provider&apos;s provisioning decision.* *01* – Cardholder&apos;s wallet account is too new relative to launch.* *02* – Cardholder&apos;s wallet account is too new relative to provisioning request.* *03* – Cardholder&apos;s wallet account/card pair is newer than date threshold.* *04* – Changes made to account data within the account threshold.* *05* – Suspicious transactions linked to this account.* *06* – Account has not had activity in the last year.* *07* – Suspended cards in the secure element.* *08* – Device was put in lost mode in the last seven days for longer than the duration threshold.* *09* – The number of provisioning attempts on this device in 24 hours exceeds threshold.* *0A* – There have been more than the threshold number of different cards attempted at provisioning to this phone in 24 hours.* *0B* – The card provisioning attempt contains a distinct name in excess of the threshold.* *0C* – The device score is less than 3.* *0D* – The account score is less than 4.* *0E* – Device provisioning location outside of the cardholder&apos;s wallet account home country.* *0G* – Suspect fraud.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReasonCode { get; set; }
#nullable restore
#else
        public string ReasonCode { get; set; }
#endif
        /// <summary>Array of recommendation reasons from the digital wallet provider.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RecommendationReasons { get; set; }
#nullable restore
#else
        public List<string> RecommendationReasons { get; set; }
#endif
        /// <summary>Contains the digital wallet provider&apos;s risk assessment for provisioning the digital wallet token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Risk_assessment? RiskAssessment { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Risk_assessment RiskAssessment { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Wallet_provider_profile"/> and sets the default values.
        /// </summary>
        public Wallet_provider_profile()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Wallet_provider_profile"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Wallet_provider_profile CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Wallet_provider_profile();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Account>(global::Marqeta.Core.Sdk.Models.Account.CreateFromDiscriminatorValue); } },
                { "device_score", n => { DeviceScore = n.GetStringValue(); } },
                { "pan_source", n => { PanSource = n.GetStringValue(); } },
                { "reason_code", n => { ReasonCode = n.GetStringValue(); } },
                { "recommendation_reasons", n => { RecommendationReasons = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "risk_assessment", n => { RiskAssessment = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Risk_assessment>(global::Marqeta.Core.Sdk.Models.Risk_assessment.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Account>("account", Account);
            writer.WriteStringValue("device_score", DeviceScore);
            writer.WriteStringValue("pan_source", PanSource);
            writer.WriteStringValue("reason_code", ReasonCode);
            writer.WriteCollectionOfPrimitiveValues<string>("recommendation_reasons", RecommendationReasons);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Risk_assessment>("risk_assessment", RiskAssessment);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
