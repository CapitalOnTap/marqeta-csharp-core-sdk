// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Response containing the status of the report.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Ads_get_report_status_response : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The timestamp when the report was created in ISO UTC format YYYY-MM-DDThh:mm:ss.000Z</summary>
        public DateTimeOffset? CreationDateTime { get; set; }
        /// <summary>The data classification of the report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DataClassification { get; set; }
#nullable restore
#else
        public string DataClassification { get; set; }
#endif
        /// <summary>The timestamp after which the report won&apos;t be available for download in ISO UTC format YYYY-MM-DDThh:mm:ss.000Z</summary>
        public DateTimeOffset? ExpirationDateTime { get; set; }
        /// <summary>The UUIDs of the files generated by the report.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? FileIds { get; set; }
#nullable restore
#else
        public List<string> FileIds { get; set; }
#endif
        /// <summary>The format of the report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Format { get; set; }
#nullable restore
#else
        public string Format { get; set; }
#endif
        /// <summary>UUID generated by Alias Directory, which identifies the Visa Alias.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The type of the report</summary>
        public global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response_reportType? ReportType { get; set; }
        /// <summary>Indicates the status of the report.</summary>
        public global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response_status? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response"/> and sets the default values.
        /// </summary>
        public Ads_get_report_status_response()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "creationDateTime", n => { CreationDateTime = n.GetDateTimeOffsetValue(); } },
                { "dataClassification", n => { DataClassification = n.GetStringValue(); } },
                { "expirationDateTime", n => { ExpirationDateTime = n.GetDateTimeOffsetValue(); } },
                { "fileIds", n => { FileIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "format", n => { Format = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "reportType", n => { ReportType = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response_reportType>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response_status>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("creationDateTime", CreationDateTime);
            writer.WriteStringValue("dataClassification", DataClassification);
            writer.WriteDateTimeOffsetValue("expirationDateTime", ExpirationDateTime);
            writer.WriteCollectionOfPrimitiveValues<string>("fileIds", FileIds);
            writer.WriteStringValue("format", Format);
            writer.WriteStringValue("id", Id);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response_reportType>("reportType", ReportType);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Ads_get_report_status_response_status>("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
