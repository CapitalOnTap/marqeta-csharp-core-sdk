// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Chargeback_request : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount property</summary>
        public double? Amount { get; set; }
        /// <summary>The channel property</summary>
        public global::Marqeta.Core.Sdk.Models.Chargeback_request_channel? Channel { get; set; }
        /// <summary>The credit_user property</summary>
        public bool? CreditUser { get; set; }
        /// <summary>The memo property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Memo { get; set; }
#nullable restore
#else
        public string Memo { get; set; }
#endif
        /// <summary>The pre_initiated property</summary>
        public bool? PreInitiated { get; set; }
        /// <summary>Either &apos;reason_code&apos; or &apos;reason_description&apos; is required</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReasonCode { get; set; }
#nullable restore
#else
        public string ReasonCode { get; set; }
#endif
        /// <summary>Either &apos;reason_description&apos; or &apos;reason_code&apos; is required</summary>
        public global::Marqeta.Core.Sdk.Models.Chargeback_request_reason_description? ReasonDescription { get; set; }
        /// <summary>The regulation_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RegulationType { get; set; }
#nullable restore
#else
        public string RegulationType { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::Marqeta.Core.Sdk.Models.Chargeback_request_status? Status { get; set; }
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The transaction_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionToken { get; set; }
#nullable restore
#else
        public string TransactionToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Chargeback_request"/> and sets the default values.
        /// </summary>
        public Chargeback_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Chargeback_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Chargeback_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Chargeback_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "channel", n => { Channel = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Chargeback_request_channel>(); } },
                { "credit_user", n => { CreditUser = n.GetBoolValue(); } },
                { "memo", n => { Memo = n.GetStringValue(); } },
                { "pre_initiated", n => { PreInitiated = n.GetBoolValue(); } },
                { "reason_code", n => { ReasonCode = n.GetStringValue(); } },
                { "reason_description", n => { ReasonDescription = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Chargeback_request_reason_description>(); } },
                { "regulation_type", n => { RegulationType = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Chargeback_request_status>(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "transaction_token", n => { TransactionToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Chargeback_request_channel>("channel", Channel);
            writer.WriteBoolValue("credit_user", CreditUser);
            writer.WriteStringValue("memo", Memo);
            writer.WriteBoolValue("pre_initiated", PreInitiated);
            writer.WriteStringValue("reason_code", ReasonCode);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Chargeback_request_reason_description>("reason_description", ReasonDescription);
            writer.WriteStringValue("regulation_type", RegulationType);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Chargeback_request_status>("status", Status);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("transaction_token", TransactionToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
