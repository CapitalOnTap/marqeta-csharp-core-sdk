// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains information on a fee schedule.
    /// </summary>
    public class ConfigFeeScheduleEntry : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date and time when the fee goes into effect, in UTC.</summary>
        public DateTimeOffset? EffectiveDate { get; set; }
        /// <summary>Method used to calculate the fee value.</summary>
        public FeeMethod? Method { get; set; }
        /// <summary>Amount of the fee.</summary>
        public double? Value { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="ConfigFeeScheduleEntry"/> and sets the default values.
        /// </summary>
        public ConfigFeeScheduleEntry()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="ConfigFeeScheduleEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ConfigFeeScheduleEntry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ConfigFeeScheduleEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"effective_date", n => { EffectiveDate = n.GetDateTimeOffsetValue(); } },
                {"method", n => { Method = n.GetEnumValue<FeeMethod>(); } },
                {"value", n => { Value = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("effective_date", EffectiveDate);
            writer.WriteEnumValue<FeeMethod>("method", Method);
            writer.WriteDoubleValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
