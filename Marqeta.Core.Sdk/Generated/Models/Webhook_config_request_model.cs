// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains the configuration information for the webhook.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Webhook_config_request_model : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Password for accessing your webhook endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BasicAuthPassword { get; set; }
#nullable restore
#else
        public string BasicAuthPassword { get; set; }
#endif
        /// <summary>Username for accessing your webhook endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BasicAuthUsername { get; set; }
#nullable restore
#else
        public string BasicAuthUsername { get; set; }
#endif
        /// <summary>Custom headers to be passed along with the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Webhook_config_request_model_custom_header? CustomHeader { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Webhook_config_request_model_custom_header CustomHeader { get; set; }
#endif
        /// <summary>Randomly chosen string used for implementing HMAC-SHA1.HMAC-SHA1 provides an added layer of security by authenticating the message and validating message integrity.Using this functionality requires that your webhook endpoint verify the message signature.For information about implementing this functionality, see &lt;&lt;/developer-guides/signature-verification, Signature Verification&gt;&gt;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Secret { get; set; }
#nullable restore
#else
        public string Secret { get; set; }
#endif
        /// <summary>URL of your webhook endpoint.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>Set to `true` to use use mutual transport layer security (mTLS) authentication for the webhook.mTLS authentication is in the beta testing phase, and is not yet generally available.Contact your Marqeta representative for more information about using mTLS authentication.</summary>
        public bool? UseMtls { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Webhook_config_request_model"/> and sets the default values.
        /// </summary>
        public Webhook_config_request_model()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Webhook_config_request_model"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Webhook_config_request_model CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Webhook_config_request_model();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "basic_auth_password", n => { BasicAuthPassword = n.GetStringValue(); } },
                { "basic_auth_username", n => { BasicAuthUsername = n.GetStringValue(); } },
                { "custom_header", n => { CustomHeader = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Webhook_config_request_model_custom_header>(global::Marqeta.Core.Sdk.Models.Webhook_config_request_model_custom_header.CreateFromDiscriminatorValue); } },
                { "secret", n => { Secret = n.GetStringValue(); } },
                { "url", n => { Url = n.GetStringValue(); } },
                { "use_mtls", n => { UseMtls = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("basic_auth_password", BasicAuthPassword);
            writer.WriteStringValue("basic_auth_username", BasicAuthUsername);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Webhook_config_request_model_custom_header>("custom_header", CustomHeader);
            writer.WriteStringValue("secret", Secret);
            writer.WriteStringValue("url", Url);
            writer.WriteBoolValue("use_mtls", UseMtls);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
