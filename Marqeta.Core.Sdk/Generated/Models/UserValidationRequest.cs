// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains information about the user.
    /// </summary>
    public class UserValidationRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date of birth of the user associated with this card.</summary>
        public DateTimeOffset? BirthDate { get; set; }
        /// <summary>Telephone number of the user associated with this card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>Random six-digit numeric postfix generated for some bulk card orders.See &lt;&lt;/core-api/bulk-card-orders, Bulk Card Orders&gt;&gt; for more information about numeric postfixes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RandomNameLine1Postfix { get; set; }
#nullable restore
#else
        public string RandomNameLine1Postfix { get; set; }
#endif
        /// <summary>Social Security Number (SSN) of the user associated with this card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Ssn { get; set; }
#nullable restore
#else
        public string Ssn { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.UserValidationRequest"/> and sets the default values.
        /// </summary>
        public UserValidationRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.UserValidationRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.UserValidationRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.UserValidationRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "birth_date", n => { BirthDate = n.GetDateTimeOffsetValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "random_name_line1_postfix", n => { RandomNameLine1Postfix = n.GetStringValue(); } },
                { "ssn", n => { Ssn = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("birth_date", BirthDate);
            writer.WriteStringValue("phone", Phone);
            writer.WriteStringValue("random_name_line1_postfix", RandomNameLine1Postfix);
            writer.WriteStringValue("ssn", Ssn);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
