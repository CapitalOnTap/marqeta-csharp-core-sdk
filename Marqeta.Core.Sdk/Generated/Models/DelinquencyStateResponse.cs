// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains details of the delinquency state of an account.
    /// </summary>
    public class DelinquencyStateResponse : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Unique identifier of the credit account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountToken { get; set; }
#nullable restore
#else
        public string AccountToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>One or more delinquency buckets for an account.Each delinquency bucket represents a billing cycle during which the account was delinquent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<DelinquencyBucketResponse>? Buckets { get; set; }
#nullable restore
#else
        public List<DelinquencyBucketResponse> Buckets { get; set; }
#endif
        /// <summary>Amount that is due for the current billing cycle.</summary>
        public double? CurrentDue { get; set; }
        /// <summary>Date and time when the account was last made current on the Marqeta platform, in UTC.If the account was never delinquent, this field returns the date and time the account was created on the Marqeta platform, in UTC.If `is_delinquent` is `true`, a null value is returned.</summary>
        public DateTimeOffset? DateAccountCurrent { get; set; }
        /// <summary>Date and time when the account last fell delinquent on the Marqeta platform, in UTC.If `is_delinquent` is `false`, a null value is returned.</summary>
        public DateTimeOffset? DateAccountDelinquent { get; set; }
        /// <summary>A value of `true` indicates that the account is currently delinquent.</summary>
        public bool? IsDelinquent { get; set; }
        /// <summary>Total number of days that the account is past due.</summary>
        public int? TotalDaysPastDue { get; set; }
        /// <summary>Total amount that is due for the current billing cycle; the sum of `total_past_due_amount` and `current_due_amount`.</summary>
        public double? TotalDue { get; set; }
        /// <summary>Total amount that is past due.</summary>
        public double? TotalPastDue { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="DelinquencyStateResponse"/> and sets the default values.
        /// </summary>
        public DelinquencyStateResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="DelinquencyStateResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DelinquencyStateResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DelinquencyStateResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"account_token", n => { AccountToken = n.GetStringValue(); } },
                {"buckets", n => { Buckets = n.GetCollectionOfObjectValues<DelinquencyBucketResponse>(DelinquencyBucketResponse.CreateFromDiscriminatorValue)?.ToList(); } },
                {"current_due", n => { CurrentDue = n.GetDoubleValue(); } },
                {"date_account_current", n => { DateAccountCurrent = n.GetDateTimeOffsetValue(); } },
                {"date_account_delinquent", n => { DateAccountDelinquent = n.GetDateTimeOffsetValue(); } },
                {"is_delinquent", n => { IsDelinquent = n.GetBoolValue(); } },
                {"total_days_past_due", n => { TotalDaysPastDue = n.GetIntValue(); } },
                {"total_due", n => { TotalDue = n.GetDoubleValue(); } },
                {"total_past_due", n => { TotalPastDue = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_token", AccountToken);
            writer.WriteCollectionOfObjectValues<DelinquencyBucketResponse>("buckets", Buckets);
            writer.WriteDoubleValue("current_due", CurrentDue);
            writer.WriteDateTimeOffsetValue("date_account_current", DateAccountCurrent);
            writer.WriteDateTimeOffsetValue("date_account_delinquent", DateAccountDelinquent);
            writer.WriteBoolValue("is_delinquent", IsDelinquent);
            writer.WriteIntValue("total_days_past_due", TotalDaysPastDue);
            writer.WriteDoubleValue("total_due", TotalDue);
            writer.WriteDoubleValue("total_past_due", TotalPastDue);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
