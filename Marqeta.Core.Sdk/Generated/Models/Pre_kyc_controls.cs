// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains configuration fields for a number of controls.*NOTE:* These controls are in effect only if `kyc_required` is `ALWAYS` or `CONDITIONAL` and the account holder has not yet passed KYC.
    /// </summary>
    public class Pre_kyc_controls : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies the maximum ledger balance allowed for members of the account holder group.</summary>
        public double? BalanceMax { get; set; }
        /// <summary>If set to `false`, this control prohibits an account holder&apos;s cards from being used at an ATM.*NOTE:* If a card product&apos;s `config.poi.atm` field is set to `false`, associated cards are prohibited from being used at an ATM regardless of this control&apos;s setting.</summary>
        public bool? CashAccessEnabled { get; set; }
        /// <summary>If set to `true`, funds can only be loaded from a program funding source.This restriction applies to GPA orders, peer transfers, and direct deposits, but does not apply to operator adjustments.</summary>
        public bool? EnableNonProgramLoads { get; set; }
        /// <summary>If set to `false`, this control prohibits an account holder from conducting transactions with a non-domestic country code.*NOTE:* If a card product is configured to prohibit non-domestic transactions, its associated cards are prohibited from such transactions regardless of this control&apos;s setting.</summary>
        public bool? InternationalEnabled { get; set; }
        /// <summary>If set to `false`, this control prohibits an account holder&apos;s account from being reloaded with funds after an initial load.This restriction applies to GPA orders, peer transfers, and direct deposits, but does not apply to operator adjustments.</summary>
        public bool? IsReloadablePreKyc { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Pre_kyc_controls"/> and sets the default values.
        /// </summary>
        public Pre_kyc_controls() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Pre_kyc_controls"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Pre_kyc_controls CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Pre_kyc_controls();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"balance_max", n => { BalanceMax = n.GetDoubleValue(); } },
                {"cash_access_enabled", n => { CashAccessEnabled = n.GetBoolValue(); } },
                {"enable_non_program_loads", n => { EnableNonProgramLoads = n.GetBoolValue(); } },
                {"international_enabled", n => { InternationalEnabled = n.GetBoolValue(); } },
                {"is_reloadable_pre_kyc", n => { IsReloadablePreKyc = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("balance_max", BalanceMax);
            writer.WriteBoolValue("cash_access_enabled", CashAccessEnabled);
            writer.WriteBoolValue("enable_non_program_loads", EnableNonProgramLoads);
            writer.WriteBoolValue("international_enabled", InternationalEnabled);
            writer.WriteBoolValue("is_reloadable_pre_kyc", IsReloadablePreKyc);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
