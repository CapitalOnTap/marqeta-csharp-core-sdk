// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Pre_kyc_controls : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Minimum is 0</summary>
        public double? BalanceMax { get; set; }
        /// <summary>The cash_access_enabled property</summary>
        public bool? CashAccessEnabled { get; set; }
        /// <summary>The enable_non_program_loads property</summary>
        public bool? EnableNonProgramLoads { get; set; }
        /// <summary>The international_enabled property</summary>
        public bool? InternationalEnabled { get; set; }
        /// <summary>The is_reloadable_pre_kyc property</summary>
        public bool? IsReloadablePreKyc { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Pre_kyc_controls"/> and sets the default values.
        /// </summary>
        public Pre_kyc_controls()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Pre_kyc_controls"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Pre_kyc_controls CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Pre_kyc_controls();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "balance_max", n => { BalanceMax = n.GetDoubleValue(); } },
                { "cash_access_enabled", n => { CashAccessEnabled = n.GetBoolValue(); } },
                { "enable_non_program_loads", n => { EnableNonProgramLoads = n.GetBoolValue(); } },
                { "international_enabled", n => { InternationalEnabled = n.GetBoolValue(); } },
                { "is_reloadable_pre_kyc", n => { IsReloadablePreKyc = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("balance_max", BalanceMax);
            writer.WriteBoolValue("cash_access_enabled", CashAccessEnabled);
            writer.WriteBoolValue("enable_non_program_loads", EnableNonProgramLoads);
            writer.WriteBoolValue("international_enabled", InternationalEnabled);
            writer.WriteBoolValue("is_reloadable_pre_kyc", IsReloadablePreKyc);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
