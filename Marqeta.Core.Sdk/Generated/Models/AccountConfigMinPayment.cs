// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains configurations for a minimum payment override on a credit account, which overrides the minimum payment configurations on the associated credit product.
    /// </summary>
    public class AccountConfigMinPayment : IAdditionalDataHolder, IParsable {
        /// <summary>Whether the minimum payment override is currently active.</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Flat amount of the minimum payment override.</summary>
        public double? MinPaymentFlatAmount { get; set; }
        /// <summary>Percentage of the total statement balance used to calculate the minimum payment override amount.</summary>
        public double? MinPaymentPercentage { get; set; }
        /// <summary>Date and time when the minimum payment override ends, in UTC.</summary>
        public DateTimeOffset? OverrideEndTime { get; set; }
        /// <summary>Date and time when the minimum payment override starts, in UTC.</summary>
        public DateTimeOffset? OverrideStartTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="AccountConfigMinPayment"/> and sets the default values.
        /// </summary>
        public AccountConfigMinPayment() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AccountConfigMinPayment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AccountConfigMinPayment CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AccountConfigMinPayment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"active", n => { Active = n.GetBoolValue(); } },
                {"min_payment_flat_amount", n => { MinPaymentFlatAmount = n.GetDoubleValue(); } },
                {"min_payment_percentage", n => { MinPaymentPercentage = n.GetDoubleValue(); } },
                {"override_end_time", n => { OverrideEndTime = n.GetDateTimeOffsetValue(); } },
                {"override_start_time", n => { OverrideStartTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteDoubleValue("min_payment_flat_amount", MinPaymentFlatAmount);
            writer.WriteDoubleValue("min_payment_percentage", MinPaymentPercentage);
            writer.WriteDateTimeOffsetValue("override_end_time", OverrideEndTime);
            writer.WriteDateTimeOffsetValue("override_start_time", OverrideStartTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
