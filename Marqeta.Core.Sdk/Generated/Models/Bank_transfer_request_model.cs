// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Bank_transfer_request_model : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount to push or pull.</summary>
        public double? Amount { get; set; }
        /// <summary>default = API</summary>
        public global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_channel? Channel { get; set; }
        /// <summary>The created_by property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedBy { get; set; }
#nullable restore
#else
        public string CreatedBy { get; set; }
#endif
        /// <summary>Currency of the push or pull.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>ACH funding source token for the external account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundingSourceToken { get; set; }
#nullable restore
#else
        public string FundingSourceToken { get; set; }
#endif
        /// <summary>Additional text describing the ACH transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Memo { get; set; }
#nullable restore
#else
        public string Memo { get; set; }
#endif
        /// <summary>Three-letter code identifying the type of entry.* *WEB* — An internet-initiated entry* *PPD* — Prearranged Payment and Deposit* *CCD* — Cash Concentration and Disbursement</summary>
        public global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_standard_entry_class_code? StandardEntryClassCode { get; set; }
        /// <summary>Description of the transaction, as it will appear on the receiver&apos;s bank statement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatementDescriptor { get; set; }
#nullable restore
#else
        public string StatementDescriptor { get; set; }
#endif
        /// <summary>Unique identifier of the ACH transfer to retrieve.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Specifies how quickly to initiate the ACH transfer.*NOTE:* Same-day transfers are limited to a maximum amount of $100,000.</summary>
        public global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_transfer_speed? TransferSpeed { get; set; }
        /// <summary>Specifies whether the ACH transfer is a push (credit) or pull (debit).</summary>
        public global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model"/> and sets the default values.
        /// </summary>
        public Bank_transfer_request_model()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "channel", n => { Channel = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_channel>(); } },
                { "created_by", n => { CreatedBy = n.GetStringValue(); } },
                { "currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                { "funding_source_token", n => { FundingSourceToken = n.GetStringValue(); } },
                { "memo", n => { Memo = n.GetStringValue(); } },
                { "standard_entry_class_code", n => { StandardEntryClassCode = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_standard_entry_class_code>(); } },
                { "statement_descriptor", n => { StatementDescriptor = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "transfer_speed", n => { TransferSpeed = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_transfer_speed>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_channel>("channel", Channel);
            writer.WriteStringValue("created_by", CreatedBy);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteStringValue("funding_source_token", FundingSourceToken);
            writer.WriteStringValue("memo", Memo);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_standard_entry_class_code>("standard_entry_class_code", StandardEntryClassCode);
            writer.WriteStringValue("statement_descriptor", StatementDescriptor);
            writer.WriteStringValue("token", Token);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_transfer_speed>("transfer_speed", TransferSpeed);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Bank_transfer_request_model_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
