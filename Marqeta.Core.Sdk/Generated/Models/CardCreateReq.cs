// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Information to create a credit card.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CardCreateReq : IAdditionalDataHolder, IParsable
    {
        /// <summary>Contains information on actions that can be performed when a card is activated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.ActivationActions? ActivationActions { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.ActivationActions ActivationActions { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unique identifier of the associated card product.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardProductToken { get; set; }
#nullable restore
#else
        public string CardProductToken { get; set; }
#endif
        /// <summary>Contains information on how long after the date of issue for when the cards are valid.If this field is not specified, the card uses the `config.card_life_cycle.expiration_offset` of the bulk card order or card product as appropriate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.ExpirationOffset? ExpirationOffset { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.ExpirationOffset ExpirationOffset { get; set; }
#endif
        /// <summary>Reissues the specified card (known as the &quot;source&quot; card) with a new primary account number (PAN).This field reissues a card with a new PAN from the specified source card.The source card is automatically terminated when the card is reissued with the new PAN.Use this field when reissuing a lost or stolen card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewPanFromCardToken { get; set; }
#nullable restore
#else
        public string NewPanFromCardToken { get; set; }
#endif
        /// <summary>Reissues the specified card (known as the &quot;source&quot; card).This field reissues a card by copying the PAN and PIN from the specified source card to the newly created card.The reissued card has the same PAN and PIN as the source card but a new expiration date and CVV2 number.*NOTE:* By default, the source card is automatically terminated when the reissued card is activated.However, if your program is configured for multiple active cards, you can prevent the source card from being automatically terminated by setting the `activation_actions.terminate_reissued_source_card` field to `false`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReissuePanFromCardToken { get; set; }
#nullable restore
#else
        public string ReissuePanFromCardToken { get; set; }
#endif
        /// <summary>Unique identifier of the credit card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Copies the PIN from the specified card to the newly created card.Both cards must belong to the same user. This field is not allowed if `reissue_pan_from_card_token` is set.Send a `GET` request to `/cards/user/{token}` to retrieve card tokens for a particular user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TranslatePinFromCardToken { get; set; }
#nullable restore
#else
        public string TranslatePinFromCardToken { get; set; }
#endif
        /// <summary>Unique identifier of the credit cardholder.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.CardCreateReq"/> and sets the default values.
        /// </summary>
        public CardCreateReq()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.CardCreateReq"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.CardCreateReq CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.CardCreateReq();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "activation_actions", n => { ActivationActions = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.ActivationActions>(global::Marqeta.Core.Sdk.Models.ActivationActions.CreateFromDiscriminatorValue); } },
                { "card_product_token", n => { CardProductToken = n.GetStringValue(); } },
                { "expiration_offset", n => { ExpirationOffset = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.ExpirationOffset>(global::Marqeta.Core.Sdk.Models.ExpirationOffset.CreateFromDiscriminatorValue); } },
                { "new_pan_from_card_token", n => { NewPanFromCardToken = n.GetStringValue(); } },
                { "reissue_pan_from_card_token", n => { ReissuePanFromCardToken = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "translate_pin_from_card_token", n => { TranslatePinFromCardToken = n.GetStringValue(); } },
                { "user_token", n => { UserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.ActivationActions>("activation_actions", ActivationActions);
            writer.WriteStringValue("card_product_token", CardProductToken);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.ExpirationOffset>("expiration_offset", ExpirationOffset);
            writer.WriteStringValue("new_pan_from_card_token", NewPanFromCardToken);
            writer.WriteStringValue("reissue_pan_from_card_token", ReissuePanFromCardToken);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("translate_pin_from_card_token", TranslatePinFromCardToken);
            writer.WriteStringValue("user_token", UserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
