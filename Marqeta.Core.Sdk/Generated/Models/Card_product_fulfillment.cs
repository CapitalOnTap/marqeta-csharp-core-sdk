// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Determines physical characteristics of a card, along with its bulk shipment information.
    /// </summary>
    public class Card_product_fulfillment : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Controls the ability to create cards from this card product; `true` allows and `false` disallows the creation of cards.*NOTE:* The card product&apos;s `active` field has no effect on card creation or the behavior of this field.</summary>
        public bool? AllowCardCreation { get; set; }
        /// <summary>If `true`, an all zero code (000) is allowed as a valid value in an authorization request.</summary>
        public bool? AllZeroCardSecurityCode { get; set; }
        /// <summary>Prefix of the bank identification number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BinPrefix { get; set; }
#nullable restore
#else
        public string BinPrefix { get; set; }
#endif
        /// <summary>Enables bulk ordering of cards of this card product type using the `/bulkissuances` endpoint.</summary>
        public bool? BulkShip { get; set; }
        /// <summary>Specifies personalized attributes to be added to the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.Card_personalization? CardPersonalization { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.Card_personalization CardPersonalization { get; set; }
#endif
        /// <summary>Enables offline personal identification number (PIN) verification for Europay Mastercard and Visa (EMV, or &quot;chip-and-PIN&quot;) card payments.</summary>
        public bool? EnableOfflinePin { get; set; }
        /// <summary>Specifies the fulfillment provider.You can work with providers located in North America, Europe, South America, and the Asia-Pacific region.For more information, see &lt;&lt;/developer-guides/managing-physical-cards#_fulfillment_providers_by_location, Fulfillment providers by location&gt;&gt;.*NOTE:* Expedited processing is available for cards that are fulfilled by link:https://www.arroweye.com/[Arroweye Solutions, window=&quot;_blank&quot;], link:https://www.gi-de.com/[G+D, window=&quot;_blank&quot;], link:http://www.idemia.com[IDEMIA, window=&quot;_blank&quot;], and link:http://perfectplastic.com/[Perfect Plastic Printing, window=&quot;_blank&quot;].You can expedite an order&apos;s processing by using the `expedite` field of the &lt;&lt;/core-api/cards, card&gt;&gt; or &lt;&lt;/core-api/bulk-card-orders, bulkissuance&gt;&gt; object.Contact your Marqeta representative for information regarding the cost of expedited service.</summary>
        public Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider? FulfillmentProvider { get; set; }
        /// <summary>Card fulfillment provider&apos;s package ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackageId { get; set; }
#nullable restore
#else
        public string PackageId { get; set; }
#endif
        /// <summary>Specifies the length of the primary account number (PAN).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PanLength { get; set; }
#nullable restore
#else
        public string PanLength { get; set; }
#endif
        /// <summary>Specifies the physical form cards of this card product type will take.</summary>
        public Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument? PaymentInstrument { get; set; }
        /// <summary>Specifies shipping details for the order.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.Shipping? Shipping { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.Shipping Shipping { get; set; }
#endif
        /// <summary>A value of `true` sets the text in the `fulfillment.card_personalization.text.name_line_1` and `name_line_2` fields to all uppercase letters.A value of `false` leaves the text in its original state.</summary>
        public bool? UppercaseNameLines { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Card_product_fulfillment"/> and sets the default values.
        /// </summary>
        public Card_product_fulfillment()
        {
            AdditionalData = new Dictionary<string, object>();
            FulfillmentProvider = Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider.PERFECTPLASTIC;
            PackageId = "0";
            PanLength = "16";
            PaymentInstrument = Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument.PHYSICAL_MSR;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Card_product_fulfillment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Card_product_fulfillment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Card_product_fulfillment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "all_zero_card_security_code", n => { AllZeroCardSecurityCode = n.GetBoolValue(); } },
                { "allow_card_creation", n => { AllowCardCreation = n.GetBoolValue(); } },
                { "bin_prefix", n => { BinPrefix = n.GetStringValue(); } },
                { "bulk_ship", n => { BulkShip = n.GetBoolValue(); } },
                { "card_personalization", n => { CardPersonalization = n.GetObjectValue<Marqeta.Core.Sdk.Models.Card_personalization>(Marqeta.Core.Sdk.Models.Card_personalization.CreateFromDiscriminatorValue); } },
                { "enable_offline_pin", n => { EnableOfflinePin = n.GetBoolValue(); } },
                { "fulfillment_provider", n => { FulfillmentProvider = n.GetEnumValue<Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider>(); } },
                { "package_id", n => { PackageId = n.GetStringValue(); } },
                { "pan_length", n => { PanLength = n.GetStringValue(); } },
                { "payment_instrument", n => { PaymentInstrument = n.GetEnumValue<Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument>(); } },
                { "shipping", n => { Shipping = n.GetObjectValue<Marqeta.Core.Sdk.Models.Shipping>(Marqeta.Core.Sdk.Models.Shipping.CreateFromDiscriminatorValue); } },
                { "uppercase_name_lines", n => { UppercaseNameLines = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow_card_creation", AllowCardCreation);
            writer.WriteBoolValue("all_zero_card_security_code", AllZeroCardSecurityCode);
            writer.WriteStringValue("bin_prefix", BinPrefix);
            writer.WriteBoolValue("bulk_ship", BulkShip);
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.Card_personalization>("card_personalization", CardPersonalization);
            writer.WriteBoolValue("enable_offline_pin", EnableOfflinePin);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider>("fulfillment_provider", FulfillmentProvider);
            writer.WriteStringValue("package_id", PackageId);
            writer.WriteStringValue("pan_length", PanLength);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument>("payment_instrument", PaymentInstrument);
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.Shipping>("shipping", Shipping);
            writer.WriteBoolValue("uppercase_name_lines", UppercaseNameLines);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
