// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Card_product_fulfillment : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The allow_card_creation property</summary>
        public bool? AllowCardCreation { get; set; }
        /// <summary>The all_zero_card_security_code property</summary>
        public bool? AllZeroCardSecurityCode { get; set; }
        /// <summary>The bin_issue_country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BinIssueCountry { get; set; }
#nullable restore
#else
        public string BinIssueCountry { get; set; }
#endif
        /// <summary>The bin_prefix property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BinPrefix { get; set; }
#nullable restore
#else
        public string BinPrefix { get; set; }
#endif
        /// <summary>List of BIN prefixes for multi-BIN support</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.Models.BinPrefixRequest>? BinPrefixes { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.Models.BinPrefixRequest> BinPrefixes { get; set; }
#endif
        /// <summary>The bulk_ship property</summary>
        public bool? BulkShip { get; set; }
        /// <summary>Specifies personalized attributes to be added to the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Card_personalization? CardPersonalization { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Card_personalization CardPersonalization { get; set; }
#endif
        /// <summary>The enable_offline_pin property</summary>
        public bool? EnableOfflinePin { get; set; }
        /// <summary>The fulfillment_provider property</summary>
        public global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider? FulfillmentProvider { get; set; }
        /// <summary>The package_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PackageId { get; set; }
#nullable restore
#else
        public string PackageId { get; set; }
#endif
        /// <summary>The pan_length property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PanLength { get; set; }
#nullable restore
#else
        public string PanLength { get; set; }
#endif
        /// <summary>The payment_instrument property</summary>
        public global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument? PaymentInstrument { get; set; }
        /// <summary>The shipping property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Shipping? Shipping { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Shipping Shipping { get; set; }
#endif
        /// <summary>The uppercase_name_lines property</summary>
        public bool? UppercaseNameLines { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Card_product_fulfillment"/> and sets the default values.
        /// </summary>
        public Card_product_fulfillment()
        {
            AdditionalData = new Dictionary<string, object>();
            FulfillmentProvider = global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider.PERFECTPLASTIC;
            PackageId = "0";
            PanLength = "16";
            PaymentInstrument = global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument.PHYSICAL_MSR;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Card_product_fulfillment"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Card_product_fulfillment CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Card_product_fulfillment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "all_zero_card_security_code", n => { AllZeroCardSecurityCode = n.GetBoolValue(); } },
                { "allow_card_creation", n => { AllowCardCreation = n.GetBoolValue(); } },
                { "bin_issue_country", n => { BinIssueCountry = n.GetStringValue(); } },
                { "bin_prefix", n => { BinPrefix = n.GetStringValue(); } },
                { "bin_prefixes", n => { BinPrefixes = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.BinPrefixRequest>(global::Marqeta.Core.Sdk.Models.BinPrefixRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "bulk_ship", n => { BulkShip = n.GetBoolValue(); } },
                { "card_personalization", n => { CardPersonalization = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Card_personalization>(global::Marqeta.Core.Sdk.Models.Card_personalization.CreateFromDiscriminatorValue); } },
                { "enable_offline_pin", n => { EnableOfflinePin = n.GetBoolValue(); } },
                { "fulfillment_provider", n => { FulfillmentProvider = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider>(); } },
                { "package_id", n => { PackageId = n.GetStringValue(); } },
                { "pan_length", n => { PanLength = n.GetStringValue(); } },
                { "payment_instrument", n => { PaymentInstrument = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument>(); } },
                { "shipping", n => { Shipping = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Shipping>(global::Marqeta.Core.Sdk.Models.Shipping.CreateFromDiscriminatorValue); } },
                { "uppercase_name_lines", n => { UppercaseNameLines = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow_card_creation", AllowCardCreation);
            writer.WriteBoolValue("all_zero_card_security_code", AllZeroCardSecurityCode);
            writer.WriteStringValue("bin_issue_country", BinIssueCountry);
            writer.WriteStringValue("bin_prefix", BinPrefix);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.BinPrefixRequest>("bin_prefixes", BinPrefixes);
            writer.WriteBoolValue("bulk_ship", BulkShip);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Card_personalization>("card_personalization", CardPersonalization);
            writer.WriteBoolValue("enable_offline_pin", EnableOfflinePin);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_fulfillment_provider>("fulfillment_provider", FulfillmentProvider);
            writer.WriteStringValue("package_id", PackageId);
            writer.WriteStringValue("pan_length", PanLength);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Card_product_fulfillment_payment_instrument>("payment_instrument", PaymentInstrument);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Shipping>("shipping", Shipping);
            writer.WriteBoolValue("uppercase_name_lines", UppercaseNameLines);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
