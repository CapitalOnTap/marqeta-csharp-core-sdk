// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    public class Original_credit_sender_data : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The deferred_hold_by property</summary>
        public Original_credit_sender_data_deferred_hold_by? DeferredHoldBy { get; set; }
        /// <summary>The fast_funds_enabled property</summary>
        public bool? FastFundsEnabled { get; set; }
        /// <summary>The funding_source property</summary>
        public Original_credit_sender_data_funding_source? FundingSource { get; set; }
        /// <summary>The sender_account_number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderAccountNumber { get; set; }
#nullable restore
#else
        public string SenderAccountNumber { get; set; }
#endif
        /// <summary>The sender_account_type property</summary>
        public Original_credit_sender_data_sender_account_type? SenderAccountType { get; set; }
        /// <summary>The sender_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderAddress { get; set; }
#nullable restore
#else
        public string SenderAddress { get; set; }
#endif
        /// <summary>The sender_city property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderCity { get; set; }
#nullable restore
#else
        public string SenderCity { get; set; }
#endif
        /// <summary>The sender_country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderCountry { get; set; }
#nullable restore
#else
        public string SenderCountry { get; set; }
#endif
        /// <summary>The sender_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderName { get; set; }
#nullable restore
#else
        public string SenderName { get; set; }
#endif
        /// <summary>The sender_reference_number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderReferenceNumber { get; set; }
#nullable restore
#else
        public string SenderReferenceNumber { get; set; }
#endif
        /// <summary>The sender_state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SenderState { get; set; }
#nullable restore
#else
        public string SenderState { get; set; }
#endif
        /// <summary>The transaction_purpose property</summary>
        public Original_credit_sender_data_transaction_purpose? TransactionPurpose { get; set; }
        /// <summary>The unique_transaction_reference_number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueTransactionReferenceNumber { get; set; }
#nullable restore
#else
        public string UniqueTransactionReferenceNumber { get; set; }
#endif
        /// <summary>The visa_transaction_purpose property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VisaTransactionPurpose { get; set; }
#nullable restore
#else
        public string VisaTransactionPurpose { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Original_credit_sender_data"/> and sets the default values.
        /// </summary>
        public Original_credit_sender_data() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Original_credit_sender_data"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Original_credit_sender_data CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Original_credit_sender_data();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"deferred_hold_by", n => { DeferredHoldBy = n.GetEnumValue<Original_credit_sender_data_deferred_hold_by>(); } },
                {"fast_funds_enabled", n => { FastFundsEnabled = n.GetBoolValue(); } },
                {"funding_source", n => { FundingSource = n.GetEnumValue<Original_credit_sender_data_funding_source>(); } },
                {"sender_account_number", n => { SenderAccountNumber = n.GetStringValue(); } },
                {"sender_account_type", n => { SenderAccountType = n.GetEnumValue<Original_credit_sender_data_sender_account_type>(); } },
                {"sender_address", n => { SenderAddress = n.GetStringValue(); } },
                {"sender_city", n => { SenderCity = n.GetStringValue(); } },
                {"sender_country", n => { SenderCountry = n.GetStringValue(); } },
                {"sender_name", n => { SenderName = n.GetStringValue(); } },
                {"sender_reference_number", n => { SenderReferenceNumber = n.GetStringValue(); } },
                {"sender_state", n => { SenderState = n.GetStringValue(); } },
                {"transaction_purpose", n => { TransactionPurpose = n.GetEnumValue<Original_credit_sender_data_transaction_purpose>(); } },
                {"unique_transaction_reference_number", n => { UniqueTransactionReferenceNumber = n.GetStringValue(); } },
                {"visa_transaction_purpose", n => { VisaTransactionPurpose = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Original_credit_sender_data_deferred_hold_by>("deferred_hold_by", DeferredHoldBy);
            writer.WriteBoolValue("fast_funds_enabled", FastFundsEnabled);
            writer.WriteEnumValue<Original_credit_sender_data_funding_source>("funding_source", FundingSource);
            writer.WriteStringValue("sender_account_number", SenderAccountNumber);
            writer.WriteEnumValue<Original_credit_sender_data_sender_account_type>("sender_account_type", SenderAccountType);
            writer.WriteStringValue("sender_address", SenderAddress);
            writer.WriteStringValue("sender_city", SenderCity);
            writer.WriteStringValue("sender_country", SenderCountry);
            writer.WriteStringValue("sender_name", SenderName);
            writer.WriteStringValue("sender_reference_number", SenderReferenceNumber);
            writer.WriteStringValue("sender_state", SenderState);
            writer.WriteEnumValue<Original_credit_sender_data_transaction_purpose>("transaction_purpose", TransactionPurpose);
            writer.WriteStringValue("unique_transaction_reference_number", UniqueTransactionReferenceNumber);
            writer.WriteStringValue("visa_transaction_purpose", VisaTransactionPurpose);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
