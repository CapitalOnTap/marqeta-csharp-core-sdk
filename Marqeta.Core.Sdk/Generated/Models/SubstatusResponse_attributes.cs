// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    #pragma warning disable CS1591
    public class SubstatusResponse_attributes : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The name of the attribute.Marqeta provides several preconfigured attributes, as described in the following list.* *chapter:* If the substatus is `BANKRUPTCY`, then this value defines the chapter.* *military_start_date:* If the substatus is `SCRA`, then this value defines the military start date.* *end_date:* If the substatus is `POWER_OF_ATTORNEY`, then the end date attribute is present.This specifies the date when the power of attorney document is no longer valid.* *poa_details:* If the substatus is `POWER_OF_ATTORNEY`, then the Power of Attorney details attribute is applicable.This attribute specifies the range of actions that the agent with Power of Attorney is able to perform on the account.By default the range is `UNRESTRICTED`.* *agent_name:* If the substatus is `POWER_OF_ATTORNEY`, then the agent name is present.This attribute specifies the name of the agent with Power of Attorney for the user.* *agent_address:* If the substatus is `POWER_OF_ATTORNEY`, then the agent address attribute is present.This attribute specifies the address of the agent with Power of Attorney for the user.* *agent_id_type:* If the substatus is `POWER_OF_ATTORNEY`, then the agent identification type attribute is present.This specifies the type of the identification method used to identify the agent with Power of Attorney for the user.* *agent_id_value:* If the substatus is `POWER_OF_ATTORNEY`, then the agent identification value attribute is present.This attribute specifies the value of the identification method used to identify the agent with Power of Attorney for the user.* *agent_id_expiration_date:* If the substatus is `POWER_OF_ATTORNEY`, then the attribute for the Power of Attorney identification expiration date attribute is present.This attribute specifies the expiration date of the identification method used to identify the agent with Power of Attorney for the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>The value of the attribute.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.SubstatusResponse_attributes"/> and sets the default values.
        /// </summary>
        public SubstatusResponse_attributes()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.SubstatusResponse_attributes"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.SubstatusResponse_attributes CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.SubstatusResponse_attributes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "key", n => { Key = n.GetStringValue(); } },
                { "value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
