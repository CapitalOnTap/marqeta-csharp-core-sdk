// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Details of a payment reminder.
    /// </summary>
    public class PaymentReminderResponse : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Token of the associated account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountToken { get; set; }
#nullable restore
#else
        public string AccountToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date and time when the Billing Cycle was created on Marqeta&apos;s credit platform</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>Days until payment cutoff date</summary>
        public int? DaysUntilDue { get; set; }
        /// <summary>Last day a payment can be made before interest and fees are charged to the account.</summary>
        public DateTimeOffset? PaymentCutoffDate { get; set; }
        /// <summary>Payment due date, based on the credit account settings.</summary>
        public DateTimeOffset? PaymentDueDate { get; set; }
        /// <summary>Amount remaining on the latest statement&apos;s minimum payment, after it&apos;s adjusted for payments, returned payments, and applicable credits that occurred after the latest statement&apos;s closing date.</summary>
        public double? RemainingMinimumPaymentDue { get; set; }
        /// <summary>Token of the associated statement summary</summary>
        public Guid? StatementSummaryToken { get; set; }
        /// <summary>Token of the payment reminder</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="PaymentReminderResponse"/> and sets the default values.
        /// </summary>
        public PaymentReminderResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PaymentReminderResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PaymentReminderResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PaymentReminderResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"account_token", n => { AccountToken = n.GetStringValue(); } },
                {"created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                {"days_until_due", n => { DaysUntilDue = n.GetIntValue(); } },
                {"payment_cutoff_date", n => { PaymentCutoffDate = n.GetDateTimeOffsetValue(); } },
                {"payment_due_date", n => { PaymentDueDate = n.GetDateTimeOffsetValue(); } },
                {"remaining_minimum_payment_due", n => { RemainingMinimumPaymentDue = n.GetDoubleValue(); } },
                {"statement_summary_token", n => { StatementSummaryToken = n.GetGuidValue(); } },
                {"token", n => { Token = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_token", AccountToken);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteIntValue("days_until_due", DaysUntilDue);
            writer.WriteDateTimeOffsetValue("payment_cutoff_date", PaymentCutoffDate);
            writer.WriteDateTimeOffsetValue("payment_due_date", PaymentDueDate);
            writer.WriteDoubleValue("remaining_minimum_payment_due", RemainingMinimumPaymentDue);
            writer.WriteGuidValue("statement_summary_token", StatementSummaryToken);
            writer.WriteStringValue("token", Token);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
