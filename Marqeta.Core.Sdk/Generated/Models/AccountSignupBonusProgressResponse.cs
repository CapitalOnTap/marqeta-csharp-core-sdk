// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AccountSignupBonusProgressResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Date and time when the account started tracking spend accrued towards the signup bonus on Marqeta&apos;s credit platform, in UTC.</summary>
        public DateTimeOffset? AccrualStartTime { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date and time when transactions must be posted by to be eligible towards signup bonus on Marqeta&apos;s credit platform, in UTC.</summary>
        public DateTimeOffset? MaturityTime { get; set; }
        /// <summary>Date and time when the account signup bonus progress was retrieved from Marqeta&apos;s credit platform, in UTC.</summary>
        public DateTimeOffset? RetrievalTime { get; set; }
        /// <summary>Minimum spend required to earn the signup bonus on Marqeta&apos;s credit platform within the given timeframe.</summary>
        public double? TargetSpend { get; set; }
        /// <summary>Total eligible spend accrued towards the signup bonus on Marqeta&apos;s credit platform at the time of retrieval if the signup bonus is still active.</summary>
        public double? TotalSpend { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.AccountSignupBonusProgressResponse"/> and sets the default values.
        /// </summary>
        public AccountSignupBonusProgressResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.AccountSignupBonusProgressResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.AccountSignupBonusProgressResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.AccountSignupBonusProgressResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accrual_start_time", n => { AccrualStartTime = n.GetDateTimeOffsetValue(); } },
                { "maturity_time", n => { MaturityTime = n.GetDateTimeOffsetValue(); } },
                { "retrieval_time", n => { RetrievalTime = n.GetDateTimeOffsetValue(); } },
                { "target_spend", n => { TargetSpend = n.GetDoubleValue(); } },
                { "total_spend", n => { TotalSpend = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("accrual_start_time", AccrualStartTime);
            writer.WriteDateTimeOffsetValue("maturity_time", MaturityTime);
            writer.WriteDateTimeOffsetValue("retrieval_time", RetrievalTime);
            writer.WriteDoubleValue("target_spend", TargetSpend);
            writer.WriteDoubleValue("total_spend", TotalSpend);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
