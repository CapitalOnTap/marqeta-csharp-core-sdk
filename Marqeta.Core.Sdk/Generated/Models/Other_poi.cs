// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Allows for configuration of points of interaction other than ecommerce or ATMs, such as points of sale (POS).
    /// </summary>
    public class Other_poi : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If set to `true`, card transactions at points of interaction other than e-commerce or ATMs are allowed.This group includes points of sale (POS).</summary>
        public bool? Allow { get; set; }
        /// <summary>If set to `true`, the cardholder is required to be present during the transaction, such as in a restaurant where the card is present but the cardholder might not be present when the card is swiped.</summary>
        public bool? CardholderPresenceRequired { get; set; }
        /// <summary>If set to `true`, cards of this card product type are required to be present during the transaction, such as in IVR scenarios.</summary>
        public bool? CardPresenceRequired { get; set; }
        /// <summary>The track1_discretionary_data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Track1DiscretionaryData { get; set; }
#nullable restore
#else
        public string Track1DiscretionaryData { get; set; }
#endif
        /// <summary>The track2_discretionary_data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Track2DiscretionaryData { get; set; }
#nullable restore
#else
        public string Track2DiscretionaryData { get; set; }
#endif
        /// <summary>The use_static_pin property</summary>
        public bool? UseStaticPin { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Other_poi"/> and sets the default values.
        /// </summary>
        public Other_poi()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Other_poi"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Other_poi CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Other_poi();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "allow", n => { Allow = n.GetBoolValue(); } },
                { "card_presence_required", n => { CardPresenceRequired = n.GetBoolValue(); } },
                { "cardholder_presence_required", n => { CardholderPresenceRequired = n.GetBoolValue(); } },
                { "track1_discretionary_data", n => { Track1DiscretionaryData = n.GetStringValue(); } },
                { "track2_discretionary_data", n => { Track2DiscretionaryData = n.GetStringValue(); } },
                { "use_static_pin", n => { UseStaticPin = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("allow", Allow);
            writer.WriteBoolValue("cardholder_presence_required", CardholderPresenceRequired);
            writer.WriteBoolValue("card_presence_required", CardPresenceRequired);
            writer.WriteStringValue("track1_discretionary_data", Track1DiscretionaryData);
            writer.WriteStringValue("track2_discretionary_data", Track2DiscretionaryData);
            writer.WriteBoolValue("use_static_pin", UseStaticPin);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
