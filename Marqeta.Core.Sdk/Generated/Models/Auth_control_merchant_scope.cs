// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Defines the group of merchants to which the authorization control applies.This object is required if the `association` object is not included in your request.Your request can include both the `merchant_scope` and `association` objects.If you include this object in your request, you must populate one or more of its fields.If no fields are populated, the authorization control applies to all merchants.
    /// </summary>
    public class Auth_control_merchant_scope : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Merchant Category Code (MCC).Identifies the type of goods or services provided by the merchant.Enter a value to control access to a particular type of product or service.See &lt;&lt;/developer-guides/controlling-spending, Controlling Spending&gt;&gt; for links to more information about merchant category codes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mcc { get; set; }
#nullable restore
#else
        public string Mcc { get; set; }
#endif
        /// <summary>Token identifying a group of MCCs.Enter a value to control access to a group of product or service types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MccGroup { get; set; }
#nullable restore
#else
        public string MccGroup { get; set; }
#endif
        /// <summary>Unique identifier of a merchant group.Enter a value to control access to a group of merchants.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MerchantGroupToken { get; set; }
#nullable restore
#else
        public string MerchantGroupToken { get; set; }
#endif
        /// <summary>Merchant identifier (MID).Identifies a specific merchant.Enter a value to control access to a particular merchant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mid { get; set; }
#nullable restore
#else
        public string Mid { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Auth_control_merchant_scope"/> and sets the default values.
        /// </summary>
        public Auth_control_merchant_scope() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Auth_control_merchant_scope"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Auth_control_merchant_scope CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Auth_control_merchant_scope();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"mcc", n => { Mcc = n.GetStringValue(); } },
                {"mcc_group", n => { MccGroup = n.GetStringValue(); } },
                {"merchant_group_token", n => { MerchantGroupToken = n.GetStringValue(); } },
                {"mid", n => { Mid = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("mcc", Mcc);
            writer.WriteStringValue("mcc_group", MccGroup);
            writer.WriteStringValue("merchant_group_token", MerchantGroupToken);
            writer.WriteStringValue("mid", Mid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
