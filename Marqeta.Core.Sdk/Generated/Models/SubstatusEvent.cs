// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Details of an event related to a substatus.
    /// </summary>
    public class SubstatusEvent : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The mechanism by which the state of the substatus was applied.* `ADMIN` - Indicates that the state of the substatus was added through the Marqeta Dashboard.* `API` - Indicates that you initiated an update of the substatus through the Core API.Use this value when creating a substatus.* `FRAUD` - Indicates that either Marqeta or the card network has determined that the account is fraudulent.* `SYSTEM` - Indicates that Marqeta initiated the state of the substatus.For example, Marqeta determined during application decisioning that the applicant is `MLA`.</summary>
        public Marqeta.Core.Sdk.Models.SubstatusEvent_channel? Channel { get; set; }
        /// <summary>Date and time when the state of the substatus went into effect, in UTC.The effective date must be in the past.If no value is set, then the effective date and time will be the current time.</summary>
        public DateTimeOffset? EffectiveDate { get; set; }
        /// <summary>Reason for applying a state designation to the substatus.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>Initial state of the substatus.`ACTIVE` - Required if the substatus is `HARDSHIP`, `FRAUD`, `MLA`, `SCRA`, `DECEASED`, or `POWER_OF_ATTORNEY`.`BANKRUPTCY_FILED` - Required if the substatus is `BANKRUPTCY`.</summary>
        public Marqeta.Core.Sdk.Models.SubstatusEvent_state? State { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.SubstatusEvent"/> and sets the default values.
        /// </summary>
        public SubstatusEvent()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.SubstatusEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.SubstatusEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.SubstatusEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "channel", n => { Channel = n.GetEnumValue<Marqeta.Core.Sdk.Models.SubstatusEvent_channel>(); } },
                { "effective_date", n => { EffectiveDate = n.GetDateTimeOffsetValue(); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<Marqeta.Core.Sdk.Models.SubstatusEvent_state>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.SubstatusEvent_channel>("channel", Channel);
            writer.WriteDateTimeOffsetValue("effective_date", EffectiveDate);
            writer.WriteStringValue("reason", Reason);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.SubstatusEvent_state>("state", State);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
