// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains a cardholder&apos;s login access information.
    /// </summary>
    public class Access_token_response : IAdditionalDataHolder, IParsable {
        /// <summary>The accesstoken_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccesstokenId { get; set; }
#nullable restore
#else
        public string AccesstokenId { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Contains client application information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.Application? Application { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.Application Application { get; set; }
#endif
        /// <summary>Date and time when the access token expires.</summary>
        public DateTimeOffset? Expires { get; set; }
        /// <summary>Array of master roles.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? MasterRoles { get; set; }
#nullable restore
#else
        public List<string> MasterRoles { get; set; }
#endif
        /// <summary>Indicates whether the access token is a single-use token.</summary>
        public bool? OneTime { get; set; }
        /// <summary>Unique identifier of the access token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Specifies the type of access token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenType { get; set; }
#nullable restore
#else
        public string TokenType { get; set; }
#endif
        /// <summary>Unique identifier of the user resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Access_token_response"/> and sets the default values.
        /// </summary>
        public Access_token_response() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Access_token_response"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Access_token_response CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Access_token_response();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"accesstoken_id", n => { AccesstokenId = n.GetStringValue(); } },
                {"application", n => { Application = n.GetObjectValue<Marqeta.Core.Sdk.Models.Application>(Marqeta.Core.Sdk.Models.Application.CreateFromDiscriminatorValue); } },
                {"expires", n => { Expires = n.GetDateTimeOffsetValue(); } },
                {"master_roles", n => { MasterRoles = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"one_time", n => { OneTime = n.GetBoolValue(); } },
                {"token", n => { Token = n.GetStringValue(); } },
                {"token_type", n => { TokenType = n.GetStringValue(); } },
                {"user_token", n => { UserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accesstoken_id", AccesstokenId);
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.Application>("application", Application);
            writer.WriteDateTimeOffsetValue("expires", Expires);
            writer.WriteCollectionOfPrimitiveValues<string>("master_roles", MasterRoles);
            writer.WriteBoolValue("one_time", OneTime);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("token_type", TokenType);
            writer.WriteStringValue("user_token", UserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
