// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Response containing the payment credential associated with a Visa ADS alias.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Ads_card_response : IAdditionalDataHolder, IParsable
    {
        /// <summary>Account number of the payment instrument.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountNumber { get; set; }
#nullable restore
#else
        public string AccountNumber { get; set; }
#endif
        /// <summary>Type of account number associated with the payment credential.</summary>
        public global::Marqeta.Core.Sdk.Models.Ads_card_response_accountNumberType? AccountNumberType { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Billing address associated with the payment credential.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Ads_billing_address? BillingAddress { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Ads_billing_address BillingAddress { get; set; }
#endif
        /// <summary>Type of card associated with the payment credential.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardType { get; set; }
#nullable restore
#else
        public string CardType { get; set; }
#endif
        /// <summary>Date and time when the payment credential was created.</summary>
        public DateTimeOffset? CreatedOn { get; set; }
        /// <summary>Three-digit ISO 4217 currency code for the payment credential.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>Expiration date of the card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExpirationDate { get; set; }
#nullable restore
#else
        public string ExpirationDate { get; set; }
#endif
        /// <summary>External ID of the payment credential, which corresponds to Marqetaâ€™s card token.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>Unique identifier of the payment credential generated by Alias Directory.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Name of the issuer of the payment credential.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssuerName { get; set; }
#nullable restore
#else
        public string IssuerName { get; set; }
#endif
        /// <summary>Last four digits of the card number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastFourDigits { get; set; }
#nullable restore
#else
        public string LastFourDigits { get; set; }
#endif
        /// <summary>Date and time when the payment credential was last updated.</summary>
        public DateTimeOffset? LastUpdatedOn { get; set; }
        /// <summary>Name on the card associated with the payment credential.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameOnCard { get; set; }
#nullable restore
#else
        public string NameOnCard { get; set; }
#endif
        /// <summary>Indicates if a payment credential is a preferred Receiving, Sending, or Paying account.This array is returned if the payment credential is a preferred account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.Models.Ads_preferred_for>? PreferredFor { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.Models.Ads_preferred_for> PreferredFor { get; set; }
#endif
        /// <summary>Status of the payment credential.</summary>
        public global::Marqeta.Core.Sdk.Models.Ads_card_response_status? Status { get; set; }
        /// <summary>Type of payment credential associated with the Visa Alias.</summary>
        public global::Marqeta.Core.Sdk.Models.Ads_card_response_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Ads_card_response"/> and sets the default values.
        /// </summary>
        public Ads_card_response()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Ads_card_response"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Ads_card_response CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Ads_card_response();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "accountNumber", n => { AccountNumber = n.GetStringValue(); } },
                { "accountNumberType", n => { AccountNumberType = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Ads_card_response_accountNumberType>(); } },
                { "billingAddress", n => { BillingAddress = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Ads_billing_address>(global::Marqeta.Core.Sdk.Models.Ads_billing_address.CreateFromDiscriminatorValue); } },
                { "cardType", n => { CardType = n.GetStringValue(); } },
                { "createdOn", n => { CreatedOn = n.GetDateTimeOffsetValue(); } },
                { "currencyCode", n => { CurrencyCode = n.GetStringValue(); } },
                { "expirationDate", n => { ExpirationDate = n.GetStringValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "issuerName", n => { IssuerName = n.GetStringValue(); } },
                { "lastFourDigits", n => { LastFourDigits = n.GetStringValue(); } },
                { "lastUpdatedOn", n => { LastUpdatedOn = n.GetDateTimeOffsetValue(); } },
                { "nameOnCard", n => { NameOnCard = n.GetStringValue(); } },
                { "preferredFor", n => { PreferredFor = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.Ads_preferred_for>(global::Marqeta.Core.Sdk.Models.Ads_preferred_for.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Ads_card_response_status>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Ads_card_response_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountNumber", AccountNumber);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Ads_card_response_accountNumberType>("accountNumberType", AccountNumberType);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Ads_billing_address>("billingAddress", BillingAddress);
            writer.WriteStringValue("cardType", CardType);
            writer.WriteDateTimeOffsetValue("createdOn", CreatedOn);
            writer.WriteStringValue("currencyCode", CurrencyCode);
            writer.WriteStringValue("expirationDate", ExpirationDate);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("issuerName", IssuerName);
            writer.WriteStringValue("lastFourDigits", LastFourDigits);
            writer.WriteDateTimeOffsetValue("lastUpdatedOn", LastUpdatedOn);
            writer.WriteStringValue("nameOnCard", NameOnCard);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.Ads_preferred_for>("preferredFor", PreferredFor);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Ads_card_response_status>("status", Status);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Ads_card_response_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
