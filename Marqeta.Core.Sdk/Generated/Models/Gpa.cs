// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Defines the type of order.
    /// </summary>
    public class Gpa : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Available balance on the card after the reload has completed.This value must be greater than or equal to the value of `trigger_amount`.Note that this is not the same as the amount added to the card, which will vary from reload to reload.</summary>
        public double? ReloadAmount { get; set; }
        /// <summary>Threshold that determines when the reload happens.The reload is triggered when the card balance falls below this amount.</summary>
        public double? TriggerAmount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Gpa"/> and sets the default values.
        /// </summary>
        public Gpa() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Gpa"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Gpa CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Gpa();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"reload_amount", n => { ReloadAmount = n.GetDoubleValue(); } },
                {"trigger_amount", n => { TriggerAmount = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("reload_amount", ReloadAmount);
            writer.WriteDoubleValue("trigger_amount", TriggerAmount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
