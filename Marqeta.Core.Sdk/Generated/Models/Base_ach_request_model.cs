// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    #pragma warning disable CS1591
    public class Base_ach_request_model : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>ACH account number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountNumber { get; set; }
#nullable restore
#else
        public string AccountNumber { get; set; }
#endif
        /// <summary>Type of account.</summary>
        public Marqeta.Core.Sdk.Models.Base_ach_request_model_account_type? AccountType { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Name of the bank holding the account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BankName { get; set; }
#nullable restore
#else
        public string BankName { get; set; }
#endif
        /// <summary>If there are multiple funding sources, this field specifies which source is used by default in funding calls.If there is only one funding source, the system ignores this field and always uses that source.</summary>
        public bool? IsDefaultAccount { get; set; }
        /// <summary>Name on the ACH account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NameOnAccount { get; set; }
#nullable restore
#else
        public string NameOnAccount { get; set; }
#endif
        /// <summary>Routing number for the ACH account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoutingNumber { get; set; }
#nullable restore
#else
        public string RoutingNumber { get; set; }
#endif
        /// <summary>Unique identifier of the funding source.If you do not include a token, the system will generate one automatically.This token is necessary for use in other calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember.This value cannot be updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Free-form text field for holding notes about verification.This field is returned only if `verification_override = true`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VerificationNotes { get; set; }
#nullable restore
#else
        public string VerificationNotes { get; set; }
#endif
        /// <summary>Allows the ACH funding source to be used, regardless of its verification status.Set this field to `true` if you can attest that you have verified the account on your own and that it will not be returned by the Federal Reserve.*NOTE:* When using `PLAID` to validate a funding source, this field is always set to `true`.</summary>
        public bool? VerificationOverride { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Base_ach_request_model"/> and sets the default values.
        /// </summary>
        public Base_ach_request_model()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Base_ach_request_model"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Base_ach_request_model CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Base_ach_request_model();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_number", n => { AccountNumber = n.GetStringValue(); } },
                { "account_type", n => { AccountType = n.GetEnumValue<Marqeta.Core.Sdk.Models.Base_ach_request_model_account_type>(); } },
                { "bank_name", n => { BankName = n.GetStringValue(); } },
                { "is_default_account", n => { IsDefaultAccount = n.GetBoolValue(); } },
                { "name_on_account", n => { NameOnAccount = n.GetStringValue(); } },
                { "routing_number", n => { RoutingNumber = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "verification_notes", n => { VerificationNotes = n.GetStringValue(); } },
                { "verification_override", n => { VerificationOverride = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_number", AccountNumber);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.Base_ach_request_model_account_type>("account_type", AccountType);
            writer.WriteStringValue("bank_name", BankName);
            writer.WriteBoolValue("is_default_account", IsDefaultAccount);
            writer.WriteStringValue("name_on_account", NameOnAccount);
            writer.WriteStringValue("routing_number", RoutingNumber);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("verification_notes", VerificationNotes);
            writer.WriteBoolValue("verification_override", VerificationOverride);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
