// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Bulk_issuance_response : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The card_allocation property</summary>
        public int? CardAllocation { get; set; }
        /// <summary>The card_fulfillment_time property</summary>
        public DateTimeOffset? CardFulfillmentTime { get; set; }
        /// <summary>The card_product_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardProductToken { get; set; }
#nullable restore
#else
        public string CardProductToken { get; set; }
#endif
        /// <summary>The cards_processed property</summary>
        public int? CardsProcessed { get; set; }
        /// <summary>The created_time property</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>The expedite property</summary>
        public bool? Expedite { get; set; }
        /// <summary>The expiration_offset property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Expiration_offset? ExpirationOffset { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Expiration_offset ExpirationOffset { get; set; }
#endif
        /// <summary>The fulfillment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.FulfillmentResponse? Fulfillment { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.FulfillmentResponse Fulfillment { get; set; }
#endif
        /// <summary>The name_line1_end_index property</summary>
        public int? NameLine1EndIndex { get; set; }
        /// <summary>The name_line_1_numeric_postfix property</summary>
        public bool? NameLine1NumericPostfix { get; set; }
        /// <summary>The name_line_1_random_postfix property</summary>
        public bool? NameLine1RandomPostfix { get; set; }
        /// <summary>The name_line1_start_index property</summary>
        public int? NameLine1StartIndex { get; set; }
        /// <summary>The provider_ship_date property</summary>
        public DateTimeOffset? ProviderShipDate { get; set; }
        /// <summary>The provider_shipping_method property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderShippingMethod { get; set; }
#nullable restore
#else
        public string ProviderShippingMethod { get; set; }
#endif
        /// <summary>The provider_tracking_number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProviderTrackingNumber { get; set; }
#nullable restore
#else
        public string ProviderTrackingNumber { get; set; }
#endif
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The user_association property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.User_association? UserAssociation { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.User_association UserAssociation { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Bulk_issuance_response"/> and sets the default values.
        /// </summary>
        public Bulk_issuance_response()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Bulk_issuance_response"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Bulk_issuance_response CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Bulk_issuance_response();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "card_allocation", n => { CardAllocation = n.GetIntValue(); } },
                { "card_fulfillment_time", n => { CardFulfillmentTime = n.GetDateTimeOffsetValue(); } },
                { "card_product_token", n => { CardProductToken = n.GetStringValue(); } },
                { "cards_processed", n => { CardsProcessed = n.GetIntValue(); } },
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "expedite", n => { Expedite = n.GetBoolValue(); } },
                { "expiration_offset", n => { ExpirationOffset = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Expiration_offset>(global::Marqeta.Core.Sdk.Models.Expiration_offset.CreateFromDiscriminatorValue); } },
                { "fulfillment", n => { Fulfillment = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.FulfillmentResponse>(global::Marqeta.Core.Sdk.Models.FulfillmentResponse.CreateFromDiscriminatorValue); } },
                { "name_line1_end_index", n => { NameLine1EndIndex = n.GetIntValue(); } },
                { "name_line_1_numeric_postfix", n => { NameLine1NumericPostfix = n.GetBoolValue(); } },
                { "name_line_1_random_postfix", n => { NameLine1RandomPostfix = n.GetBoolValue(); } },
                { "name_line1_start_index", n => { NameLine1StartIndex = n.GetIntValue(); } },
                { "provider_ship_date", n => { ProviderShipDate = n.GetDateTimeOffsetValue(); } },
                { "provider_shipping_method", n => { ProviderShippingMethod = n.GetStringValue(); } },
                { "provider_tracking_number", n => { ProviderTrackingNumber = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "user_association", n => { UserAssociation = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.User_association>(global::Marqeta.Core.Sdk.Models.User_association.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("card_allocation", CardAllocation);
            writer.WriteDateTimeOffsetValue("card_fulfillment_time", CardFulfillmentTime);
            writer.WriteStringValue("card_product_token", CardProductToken);
            writer.WriteIntValue("cards_processed", CardsProcessed);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteBoolValue("expedite", Expedite);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Expiration_offset>("expiration_offset", ExpirationOffset);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.FulfillmentResponse>("fulfillment", Fulfillment);
            writer.WriteIntValue("name_line1_end_index", NameLine1EndIndex);
            writer.WriteBoolValue("name_line_1_numeric_postfix", NameLine1NumericPostfix);
            writer.WriteBoolValue("name_line_1_random_postfix", NameLine1RandomPostfix);
            writer.WriteIntValue("name_line1_start_index", NameLine1StartIndex);
            writer.WriteDateTimeOffsetValue("provider_ship_date", ProviderShipDate);
            writer.WriteStringValue("provider_shipping_method", ProviderShippingMethod);
            writer.WriteStringValue("provider_tracking_number", ProviderTrackingNumber);
            writer.WriteStringValue("token", Token);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.User_association>("user_association", UserAssociation);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
