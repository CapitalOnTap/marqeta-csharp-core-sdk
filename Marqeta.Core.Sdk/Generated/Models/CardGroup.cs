// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Request body for a Card Group object
    /// </summary>
    public class CardGroup : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Array of card tokens associated with group. There will be at least one card token in the array.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? CardTokens { get; set; }
#nullable restore
#else
        public List<string> CardTokens { get; set; }
#endif
        /// <summary>Date and time the card group was created in the system.The date and time is provided in ISO 8601 format.</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>Unique identifier of the last reissued card token associated with group. It may be empty if there is no reissued card.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LastIssuedCardToken { get; set; }
#nullable restore
#else
        public string LastIssuedCardToken { get; set; }
#endif
        /// <summary>Unique identifier of the card token associated with group. This is the card that will be used to create the card group.The Card Group Service will send a request to JCard to verify that this card is not a reissue or replacement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SourceCardToken { get; set; }
#nullable restore
#else
        public string SourceCardToken { get; set; }
#endif
        /// <summary>Unique identifier of the card group.If you do not include a token, the system will generate one automatically.This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember.This value cannot be updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Date and time the card group was last updated in the system.The date and time is provided in ISO 8601 format.</summary>
        public DateTimeOffset? UpdatedTime { get; set; }
        /// <summary>Unique identifier of the user this card group belongs to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="CardGroup"/> and sets the default values.
        /// </summary>
        public CardGroup() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="CardGroup"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CardGroup CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CardGroup();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"card_tokens", n => { CardTokens = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                {"last_issued_card_token", n => { LastIssuedCardToken = n.GetStringValue(); } },
                {"source_card_token", n => { SourceCardToken = n.GetStringValue(); } },
                {"token", n => { Token = n.GetStringValue(); } },
                {"updated_time", n => { UpdatedTime = n.GetDateTimeOffsetValue(); } },
                {"user_token", n => { UserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("card_tokens", CardTokens);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteStringValue("last_issued_card_token", LastIssuedCardToken);
            writer.WriteStringValue("source_card_token", SourceCardToken);
            writer.WriteStringValue("token", Token);
            writer.WriteDateTimeOffsetValue("updated_time", UpdatedTime);
            writer.WriteStringValue("user_token", UserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
