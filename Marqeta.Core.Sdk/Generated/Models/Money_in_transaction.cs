// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Defines the original credit transaction (OCT) types that are subject to velocity control.Your request can contain either a `money_in_transaction` object or the `include_credits` field, not both.
    /// </summary>
    public class Money_in_transaction : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies the types of credits to include in the original credit transaction (OCT).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IncludeCreditsTypes { get; set; }
#nullable restore
#else
        public List<string> IncludeCreditsTypes { get; set; }
#endif
        /// <summary>Indicates whether or not cash and check network load transactions will be subject to velocity control.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IncludeNetworkLoadTypes { get; set; }
#nullable restore
#else
        public List<string> IncludeNetworkLoadTypes { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Money_in_transaction"/> and sets the default values.
        /// </summary>
        public Money_in_transaction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Money_in_transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Money_in_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Money_in_transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "include_credits_types", n => { IncludeCreditsTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                { "include_network_load_types", n => { IncludeNetworkLoadTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("include_credits_types", IncludeCreditsTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("include_network_load_types", IncludeNetworkLoadTypes);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
