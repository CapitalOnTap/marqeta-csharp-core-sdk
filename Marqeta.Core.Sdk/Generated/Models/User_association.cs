// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Associates each card with a user.
    /// </summary>
    public class User_association : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Set to `true` to associate all cards with the same user.Set to `false` to associate each card with a different user.When set to `false`, users are generated automatically and associated with the cards.</summary>
        public bool? SingleInventoryUser { get; set; }
        /// <summary>If `single_inventory_user=true`, use this field to specify the token of an existing user.All cards in the order will be associated with this user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SingleInventoryUserToken { get; set; }
#nullable restore
#else
        public string SingleInventoryUserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="User_association"/> and sets the default values.
        /// </summary>
        public User_association() {
            AdditionalData = new Dictionary<string, object>();
            SingleInventoryUserToken = "false";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="User_association"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static User_association CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new User_association();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"single_inventory_user", n => { SingleInventoryUser = n.GetBoolValue(); } },
                {"single_inventory_user_token", n => { SingleInventoryUserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("single_inventory_user", SingleInventoryUser);
            writer.WriteStringValue("single_inventory_user_token", SingleInventoryUserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
