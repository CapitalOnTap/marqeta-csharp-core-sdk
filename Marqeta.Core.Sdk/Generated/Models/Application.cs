// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains client application information.
    /// </summary>
    public class Application : IAdditionalDataHolder, IParsable
    {
        /// <summary>Access code of the client application.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccessCode { get; set; }
#nullable restore
#else
        public string AccessCode { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>URL of the client application assets.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AssetsUrl { get; set; }
#nullable restore
#else
        public string AssetsUrl { get; set; }
#endif
        /// <summary>Base URL of the client API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientApiBaseUrl { get; set; }
#nullable restore
#else
        public string ClientApiBaseUrl { get; set; }
#endif
        /// <summary>Client application&apos;s environment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Environment { get; set; }
#nullable restore
#else
        public string Environment { get; set; }
#endif
        /// <summary>Name of the program on the Marqeta platform.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Program { get; set; }
#nullable restore
#else
        public string Program { get; set; }
#endif
        /// <summary>Short code of the program on the Marqeta platform.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProgramShortCode { get; set; }
#nullable restore
#else
        public string ProgramShortCode { get; set; }
#endif
        /// <summary>Unique identifier of the `application` object.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Application"/> and sets the default values.
        /// </summary>
        public Application()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Application"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Application CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Application();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "access_code", n => { AccessCode = n.GetStringValue(); } },
                { "assets_url", n => { AssetsUrl = n.GetStringValue(); } },
                { "client_api_base_url", n => { ClientApiBaseUrl = n.GetStringValue(); } },
                { "environment", n => { Environment = n.GetStringValue(); } },
                { "program", n => { Program = n.GetStringValue(); } },
                { "program_short_code", n => { ProgramShortCode = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("access_code", AccessCode);
            writer.WriteStringValue("assets_url", AssetsUrl);
            writer.WriteStringValue("client_api_base_url", ClientApiBaseUrl);
            writer.WriteStringValue("environment", Environment);
            writer.WriteStringValue("program", Program);
            writer.WriteStringValue("program_short_code", ProgramShortCode);
            writer.WriteStringValue("token", Token);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
