// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    #pragma warning disable CS1591
    public class Msa_returns : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The active property</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The aggregated_balances property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.Msa_aggregated_balances? AggregatedBalances { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.Msa_aggregated_balances AggregatedBalances { get; set; }
#endif
        /// <summary>The amount property</summary>
        public double? Amount { get; set; }
        /// <summary>The business_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessToken { get; set; }
#nullable restore
#else
        public string BusinessToken { get; set; }
#endif
        /// <summary>The campaign_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CampaignToken { get; set; }
#nullable restore
#else
        public string CampaignToken { get; set; }
#endif
        /// <summary>yyyy-MM-ddTHH:mm:ssZ</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>The currency_code property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>yyyy-MM-ddThh:mm:ssZ</summary>
        public DateTimeOffset? EndDate { get; set; }
        /// <summary>Contains funding information for the transaction, including funding amount, type, and time.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.Funding? Funding { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.Funding Funding { get; set; }
#endif
        /// <summary>yyyy-MM-ddTHH:mm:ssZ</summary>
        public DateTimeOffset? LastModifiedTime { get; set; }
        /// <summary>yyyy-MM-ddThh:mm:ssZ</summary>
        public DateTimeOffset? LastTransactionDate { get; set; }
        /// <summary>The order_balances property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.Msa_balances? OrderBalances { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.Msa_balances OrderBalances { get; set; }
#endif
        /// <summary>The original_order_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalOrderToken { get; set; }
#nullable restore
#else
        public string OriginalOrderToken { get; set; }
#endif
        /// <summary>The reward_amount property</summary>
        public double? RewardAmount { get; set; }
        /// <summary>The reward_trigger_amount property</summary>
        public double? RewardTriggerAmount { get; set; }
        /// <summary>yyyy-MM-ddThh:mm:ssZ</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The transaction_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionToken { get; set; }
#nullable restore
#else
        public string TransactionToken { get; set; }
#endif
        /// <summary>The unloaded_amount property</summary>
        public double? UnloadedAmount { get; set; }
        /// <summary>The user_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Msa_returns"/> and sets the default values.
        /// </summary>
        public Msa_returns()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Msa_returns"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Msa_returns CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Msa_returns();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "aggregated_balances", n => { AggregatedBalances = n.GetObjectValue<Marqeta.Core.Sdk.Models.Msa_aggregated_balances>(Marqeta.Core.Sdk.Models.Msa_aggregated_balances.CreateFromDiscriminatorValue); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "business_token", n => { BusinessToken = n.GetStringValue(); } },
                { "campaign_token", n => { CampaignToken = n.GetStringValue(); } },
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                { "end_date", n => { EndDate = n.GetDateTimeOffsetValue(); } },
                { "funding", n => { Funding = n.GetObjectValue<Marqeta.Core.Sdk.Models.Funding>(Marqeta.Core.Sdk.Models.Funding.CreateFromDiscriminatorValue); } },
                { "last_modified_time", n => { LastModifiedTime = n.GetDateTimeOffsetValue(); } },
                { "last_transaction_date", n => { LastTransactionDate = n.GetDateTimeOffsetValue(); } },
                { "order_balances", n => { OrderBalances = n.GetObjectValue<Marqeta.Core.Sdk.Models.Msa_balances>(Marqeta.Core.Sdk.Models.Msa_balances.CreateFromDiscriminatorValue); } },
                { "original_order_token", n => { OriginalOrderToken = n.GetStringValue(); } },
                { "reward_amount", n => { RewardAmount = n.GetDoubleValue(); } },
                { "reward_trigger_amount", n => { RewardTriggerAmount = n.GetDoubleValue(); } },
                { "start_date", n => { StartDate = n.GetDateTimeOffsetValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "transaction_token", n => { TransactionToken = n.GetStringValue(); } },
                { "unloaded_amount", n => { UnloadedAmount = n.GetDoubleValue(); } },
                { "user_token", n => { UserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.Msa_aggregated_balances>("aggregated_balances", AggregatedBalances);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteStringValue("business_token", BusinessToken);
            writer.WriteStringValue("campaign_token", CampaignToken);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteDateTimeOffsetValue("end_date", EndDate);
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.Funding>("funding", Funding);
            writer.WriteDateTimeOffsetValue("last_modified_time", LastModifiedTime);
            writer.WriteDateTimeOffsetValue("last_transaction_date", LastTransactionDate);
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.Msa_balances>("order_balances", OrderBalances);
            writer.WriteStringValue("original_order_token", OriginalOrderToken);
            writer.WriteDoubleValue("reward_amount", RewardAmount);
            writer.WriteDoubleValue("reward_trigger_amount", RewardTriggerAmount);
            writer.WriteDateTimeOffsetValue("start_date", StartDate);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("transaction_token", TransactionToken);
            writer.WriteDoubleValue("unloaded_amount", UnloadedAmount);
            writer.WriteStringValue("user_token", UserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
