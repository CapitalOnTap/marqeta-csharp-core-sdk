// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    #pragma warning disable CS1591
    public class Jit_funding_programgateway_funding_source : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>If set to `true`, this card product is always funded from this program gateway funding source.</summary>
        public bool? AlwaysFund { get; set; }
        /// <summary>Specifies whether JIT Funding is enabled or disabled for the program gateway funding source.A value of `true` indicates that the program gateway funding source is enabled and will be debited when swipes occur.</summary>
        public bool? Enabled { get; set; }
        /// <summary>Unique identifier of the already existing funding source.Required if JIT Funding is enabled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FundingSourceToken { get; set; }
#nullable restore
#else
        public string FundingSourceToken { get; set; }
#endif
        /// <summary>Specifies the return destination for refunds in the case of a transaction reversal.In most cases, you should set the value to `GATEWAY`, which returns funds to the program gateway funding source.Setting to `GPA` returns the funds to the user&apos;s GPA, which creates a positive account balance and introduces the potential of a transaction being authorized without a JIT Funding request being sent to the gateway.</summary>
        public Marqeta.Core.Sdk.Models.Jit_funding_programgateway_funding_source_refunds_destination? RefundsDestination { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Jit_funding_programgateway_funding_source"/> and sets the default values.
        /// </summary>
        public Jit_funding_programgateway_funding_source()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Jit_funding_programgateway_funding_source"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Jit_funding_programgateway_funding_source CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Jit_funding_programgateway_funding_source();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "always_fund", n => { AlwaysFund = n.GetBoolValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "funding_source_token", n => { FundingSourceToken = n.GetStringValue(); } },
                { "refunds_destination", n => { RefundsDestination = n.GetEnumValue<Marqeta.Core.Sdk.Models.Jit_funding_programgateway_funding_source_refunds_destination>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("always_fund", AlwaysFund);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteStringValue("funding_source_token", FundingSourceToken);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.Jit_funding_programgateway_funding_source_refunds_destination>("refunds_destination", RefundsDestination);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
