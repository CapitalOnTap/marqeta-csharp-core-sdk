// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Internal_authorization_transaction : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The account property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Internal_account? Account { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Internal_account Account { get; set; }
#endif
        /// <summary>The account2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Internal_account? Account2 { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Internal_account Account2 { get; set; }
#endif
        /// <summary>The acquirer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Acquirer { get; set; }
#nullable restore
#else
        public string Acquirer { get; set; }
#endif
        /// <summary>The acquirerFee property</summary>
        public double? AcquirerFee { get; set; }
        /// <summary>The acquirerReferenceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AcquirerReferenceId { get; set; }
#nullable restore
#else
        public string AcquirerReferenceId { get; set; }
#endif
        /// <summary>The actingCardholder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Internal_user? ActingCardholder { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Internal_user ActingCardholder { get; set; }
#endif
        /// <summary>The additionalAmount property</summary>
        public double? AdditionalAmount { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount property</summary>
        public double? Amount { get; set; }
        /// <summary>The approvalNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ApprovalNumber { get; set; }
#nullable restore
#else
        public string ApprovalNumber { get; set; }
#endif
        /// <summary>The ca_city property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaCity { get; set; }
#nullable restore
#else
        public string CaCity { get; set; }
#endif
        /// <summary>The ca_country property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaCountry { get; set; }
#nullable restore
#else
        public string CaCountry { get; set; }
#endif
        /// <summary>The ca_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaName { get; set; }
#nullable restore
#else
        public string CaName { get; set; }
#endif
        /// <summary>The captureDate property</summary>
        public DateTimeOffset? CaptureDate { get; set; }
        /// <summary>The card property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Internal_card? Card { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Internal_card Card { get; set; }
#endif
        /// <summary>The cardholder property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Internal_user? Cardholder { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Internal_user Cardholder { get; set; }
#endif
        /// <summary>The ca_region property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaRegion { get; set; }
#nullable restore
#else
        public string CaRegion { get; set; }
#endif
        /// <summary>The ca_street property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaStreet { get; set; }
#nullable restore
#else
        public string CaStreet { get; set; }
#endif
        /// <summary>The ca_zip property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CaZip { get; set; }
#nullable restore
#else
        public string CaZip { get; set; }
#endif
        /// <summary>The currencyCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>The date property</summary>
        public DateTimeOffset? Date { get; set; }
        /// <summary>The digital_wallet_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.InternalDigitalWallet? DigitalWalletToken { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.InternalDigitalWallet DigitalWalletToken { get; set; }
#endif
        /// <summary>The displayMessage property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayMessage { get; set; }
#nullable restore
#else
        public string DisplayMessage { get; set; }
#endif
        /// <summary>The duration property</summary>
        public int? Duration { get; set; }
        /// <summary>The expirationTime property</summary>
        public DateTimeOffset? ExpirationTime { get; set; }
        /// <summary>The extrc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Extrc { get; set; }
#nullable restore
#else
        public string Extrc { get; set; }
#endif
        /// <summary>The feesModel property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.Models.Network_fee_model>? FeesModel { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.Models.Network_fee_model> FeesModel { get; set; }
#endif
        /// <summary>The forwardingInstId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ForwardingInstId { get; set; }
#nullable restore
#else
        public string ForwardingInstId { get; set; }
#endif
        /// <summary>The functionCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FunctionCode { get; set; }
#nullable restore
#else
        public string FunctionCode { get; set; }
#endif
        /// <summary>The incomingNetworkRequestITC property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IncomingNetworkRequestITC { get; set; }
#nullable restore
#else
        public string IncomingNetworkRequestITC { get; set; }
#endif
        /// <summary>The irc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Irc { get; set; }
#nullable restore
#else
        public string Irc { get; set; }
#endif
        /// <summary>The isFinancialAdvice property</summary>
        public bool? IsFinancialAdvice { get; set; }
        /// <summary>The issuerFee property</summary>
        public double? IssuerFee { get; set; }
        /// <summary>The itc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Itc { get; set; }
#nullable restore
#else
        public string Itc { get; set; }
#endif
        /// <summary>The layer property</summary>
        public int? Layer { get; set; }
        /// <summary>The localTransactionDate property</summary>
        public DateTimeOffset? LocalTransactionDate { get; set; }
        /// <summary>The mcc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mcc { get; set; }
#nullable restore
#else
        public string Mcc { get; set; }
#endif
        /// <summary>The mid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mid { get; set; }
#nullable restore
#else
        public string Mid { get; set; }
#endif
        /// <summary>The network property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Network { get; set; }
#nullable restore
#else
        public string Network { get; set; }
#endif
        /// <summary>The networkMid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkMid { get; set; }
#nullable restore
#else
        public string NetworkMid { get; set; }
#endif
        /// <summary>The networkReferenceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NetworkReferenceId { get; set; }
#nullable restore
#else
        public string NetworkReferenceId { get; set; }
#endif
        /// <summary>The node property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Node { get; set; }
#nullable restore
#else
        public string Node { get; set; }
#endif
        /// <summary>The originator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Originator { get; set; }
#nullable restore
#else
        public string Originator { get; set; }
#endif
        /// <summary>Transactions are represented by the `transaction` object.The Marqeta platform creates a separate `transaction` object for each transaction message received from the card network.The attributes of a given `transaction` object depend on the transaction type.This section documents all fields that might be included in a `transaction` object.// This schema is used by InfoDev to generate API reference documentation.// File location in GitHub is: openapi/transactions/schemas/transaction_model.yaml</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Transaction_model? Payload { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Transaction_model Payload { get; set; }
#endif
        /// <summary>The rc property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rc { get; set; }
#nullable restore
#else
        public string Rc { get; set; }
#endif
        /// <summary>The reasonCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReasonCode { get; set; }
#nullable restore
#else
        public string ReasonCode { get; set; }
#endif
        /// <summary>The ref_transaction property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction? RefTransaction { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction RefTransaction { get; set; }
#endif
        /// <summary>The remoteHost property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteHost { get; set; }
#nullable restore
#else
        public string RemoteHost { get; set; }
#endif
        /// <summary>The requestAmount property</summary>
        public double? RequestAmount { get; set; }
        /// <summary>The responseAmount property</summary>
        public double? ResponseAmount { get; set; }
        /// <summary>The responseCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResponseCode { get; set; }
#nullable restore
#else
        public string ResponseCode { get; set; }
#endif
        /// <summary>The retrievalReferenceNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RetrievalReferenceNumber { get; set; }
#nullable restore
#else
        public string RetrievalReferenceNumber { get; set; }
#endif
        /// <summary>The returnedBalances property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReturnedBalances { get; set; }
#nullable restore
#else
        public string ReturnedBalances { get; set; }
#endif
        /// <summary>The settlementDate property</summary>
        public DateTimeOffset? SettlementDate { get; set; }
        /// <summary>The stan property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Stan { get; set; }
#nullable restore
#else
        public string Stan { get; set; }
#endif
        /// <summary>The subNetwork property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubNetwork { get; set; }
#nullable restore
#else
        public string SubNetwork { get; set; }
#endif
        /// <summary>The tags property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tags { get; set; }
#nullable restore
#else
        public string Tags { get; set; }
#endif
        /// <summary>The tid property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tid { get; set; }
#nullable restore
#else
        public string Tid { get; set; }
#endif
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The tranlogAttributes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_tranlogAttributes? TranlogAttributes { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_tranlogAttributes TranlogAttributes { get; set; }
#endif
        /// <summary>The transaction_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionName { get; set; }
#nullable restore
#else
        public string TransactionName { get; set; }
#endif
        /// <summary>The transactionState property</summary>
        public global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_transactionState? TransactionState { get; set; }
        /// <summary>The transactionType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionType { get; set; }
#nullable restore
#else
        public string TransactionType { get; set; }
#endif
        /// <summary>The transmissionDate property</summary>
        public DateTimeOffset? TransmissionDate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction"/> and sets the default values.
        /// </summary>
        public Internal_authorization_transaction()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Internal_account>(global::Marqeta.Core.Sdk.Models.Internal_account.CreateFromDiscriminatorValue); } },
                { "account2", n => { Account2 = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Internal_account>(global::Marqeta.Core.Sdk.Models.Internal_account.CreateFromDiscriminatorValue); } },
                { "acquirer", n => { Acquirer = n.GetStringValue(); } },
                { "acquirerFee", n => { AcquirerFee = n.GetDoubleValue(); } },
                { "acquirerReferenceId", n => { AcquirerReferenceId = n.GetStringValue(); } },
                { "actingCardholder", n => { ActingCardholder = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Internal_user>(global::Marqeta.Core.Sdk.Models.Internal_user.CreateFromDiscriminatorValue); } },
                { "additionalAmount", n => { AdditionalAmount = n.GetDoubleValue(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "approvalNumber", n => { ApprovalNumber = n.GetStringValue(); } },
                { "ca_city", n => { CaCity = n.GetStringValue(); } },
                { "ca_country", n => { CaCountry = n.GetStringValue(); } },
                { "ca_name", n => { CaName = n.GetStringValue(); } },
                { "ca_region", n => { CaRegion = n.GetStringValue(); } },
                { "ca_street", n => { CaStreet = n.GetStringValue(); } },
                { "ca_zip", n => { CaZip = n.GetStringValue(); } },
                { "captureDate", n => { CaptureDate = n.GetDateTimeOffsetValue(); } },
                { "card", n => { Card = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Internal_card>(global::Marqeta.Core.Sdk.Models.Internal_card.CreateFromDiscriminatorValue); } },
                { "cardholder", n => { Cardholder = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Internal_user>(global::Marqeta.Core.Sdk.Models.Internal_user.CreateFromDiscriminatorValue); } },
                { "currencyCode", n => { CurrencyCode = n.GetStringValue(); } },
                { "date", n => { Date = n.GetDateTimeOffsetValue(); } },
                { "digital_wallet_token", n => { DigitalWalletToken = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.InternalDigitalWallet>(global::Marqeta.Core.Sdk.Models.InternalDigitalWallet.CreateFromDiscriminatorValue); } },
                { "displayMessage", n => { DisplayMessage = n.GetStringValue(); } },
                { "duration", n => { Duration = n.GetIntValue(); } },
                { "expirationTime", n => { ExpirationTime = n.GetDateTimeOffsetValue(); } },
                { "extrc", n => { Extrc = n.GetStringValue(); } },
                { "feesModel", n => { FeesModel = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.Network_fee_model>(global::Marqeta.Core.Sdk.Models.Network_fee_model.CreateFromDiscriminatorValue)?.AsList(); } },
                { "forwardingInstId", n => { ForwardingInstId = n.GetStringValue(); } },
                { "functionCode", n => { FunctionCode = n.GetStringValue(); } },
                { "incomingNetworkRequestITC", n => { IncomingNetworkRequestITC = n.GetStringValue(); } },
                { "irc", n => { Irc = n.GetStringValue(); } },
                { "isFinancialAdvice", n => { IsFinancialAdvice = n.GetBoolValue(); } },
                { "issuerFee", n => { IssuerFee = n.GetDoubleValue(); } },
                { "itc", n => { Itc = n.GetStringValue(); } },
                { "layer", n => { Layer = n.GetIntValue(); } },
                { "localTransactionDate", n => { LocalTransactionDate = n.GetDateTimeOffsetValue(); } },
                { "mcc", n => { Mcc = n.GetStringValue(); } },
                { "mid", n => { Mid = n.GetStringValue(); } },
                { "network", n => { Network = n.GetStringValue(); } },
                { "networkMid", n => { NetworkMid = n.GetStringValue(); } },
                { "networkReferenceId", n => { NetworkReferenceId = n.GetStringValue(); } },
                { "node", n => { Node = n.GetStringValue(); } },
                { "originator", n => { Originator = n.GetStringValue(); } },
                { "payload", n => { Payload = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Transaction_model>(global::Marqeta.Core.Sdk.Models.Transaction_model.CreateFromDiscriminatorValue); } },
                { "rc", n => { Rc = n.GetStringValue(); } },
                { "reasonCode", n => { ReasonCode = n.GetStringValue(); } },
                { "ref_transaction", n => { RefTransaction = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction>(global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction.CreateFromDiscriminatorValue); } },
                { "remoteHost", n => { RemoteHost = n.GetStringValue(); } },
                { "requestAmount", n => { RequestAmount = n.GetDoubleValue(); } },
                { "responseAmount", n => { ResponseAmount = n.GetDoubleValue(); } },
                { "responseCode", n => { ResponseCode = n.GetStringValue(); } },
                { "retrievalReferenceNumber", n => { RetrievalReferenceNumber = n.GetStringValue(); } },
                { "returnedBalances", n => { ReturnedBalances = n.GetStringValue(); } },
                { "settlementDate", n => { SettlementDate = n.GetDateTimeOffsetValue(); } },
                { "stan", n => { Stan = n.GetStringValue(); } },
                { "subNetwork", n => { SubNetwork = n.GetStringValue(); } },
                { "tags", n => { Tags = n.GetStringValue(); } },
                { "tid", n => { Tid = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "tranlogAttributes", n => { TranlogAttributes = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_tranlogAttributes>(global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_tranlogAttributes.CreateFromDiscriminatorValue); } },
                { "transaction_name", n => { TransactionName = n.GetStringValue(); } },
                { "transactionState", n => { TransactionState = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_transactionState>(); } },
                { "transactionType", n => { TransactionType = n.GetStringValue(); } },
                { "transmissionDate", n => { TransmissionDate = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Internal_account>("account", Account);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Internal_account>("account2", Account2);
            writer.WriteStringValue("acquirer", Acquirer);
            writer.WriteDoubleValue("acquirerFee", AcquirerFee);
            writer.WriteStringValue("acquirerReferenceId", AcquirerReferenceId);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Internal_user>("actingCardholder", ActingCardholder);
            writer.WriteDoubleValue("additionalAmount", AdditionalAmount);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteStringValue("approvalNumber", ApprovalNumber);
            writer.WriteStringValue("ca_city", CaCity);
            writer.WriteStringValue("ca_country", CaCountry);
            writer.WriteStringValue("ca_name", CaName);
            writer.WriteDateTimeOffsetValue("captureDate", CaptureDate);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Internal_card>("card", Card);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Internal_user>("cardholder", Cardholder);
            writer.WriteStringValue("ca_region", CaRegion);
            writer.WriteStringValue("ca_street", CaStreet);
            writer.WriteStringValue("ca_zip", CaZip);
            writer.WriteStringValue("currencyCode", CurrencyCode);
            writer.WriteDateTimeOffsetValue("date", Date);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.InternalDigitalWallet>("digital_wallet_token", DigitalWalletToken);
            writer.WriteStringValue("displayMessage", DisplayMessage);
            writer.WriteIntValue("duration", Duration);
            writer.WriteDateTimeOffsetValue("expirationTime", ExpirationTime);
            writer.WriteStringValue("extrc", Extrc);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.Network_fee_model>("feesModel", FeesModel);
            writer.WriteStringValue("forwardingInstId", ForwardingInstId);
            writer.WriteStringValue("functionCode", FunctionCode);
            writer.WriteStringValue("incomingNetworkRequestITC", IncomingNetworkRequestITC);
            writer.WriteStringValue("irc", Irc);
            writer.WriteBoolValue("isFinancialAdvice", IsFinancialAdvice);
            writer.WriteDoubleValue("issuerFee", IssuerFee);
            writer.WriteStringValue("itc", Itc);
            writer.WriteIntValue("layer", Layer);
            writer.WriteDateTimeOffsetValue("localTransactionDate", LocalTransactionDate);
            writer.WriteStringValue("mcc", Mcc);
            writer.WriteStringValue("mid", Mid);
            writer.WriteStringValue("network", Network);
            writer.WriteStringValue("networkMid", NetworkMid);
            writer.WriteStringValue("networkReferenceId", NetworkReferenceId);
            writer.WriteStringValue("node", Node);
            writer.WriteStringValue("originator", Originator);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Transaction_model>("payload", Payload);
            writer.WriteStringValue("rc", Rc);
            writer.WriteStringValue("reasonCode", ReasonCode);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction>("ref_transaction", RefTransaction);
            writer.WriteStringValue("remoteHost", RemoteHost);
            writer.WriteDoubleValue("requestAmount", RequestAmount);
            writer.WriteDoubleValue("responseAmount", ResponseAmount);
            writer.WriteStringValue("responseCode", ResponseCode);
            writer.WriteStringValue("retrievalReferenceNumber", RetrievalReferenceNumber);
            writer.WriteStringValue("returnedBalances", ReturnedBalances);
            writer.WriteDateTimeOffsetValue("settlementDate", SettlementDate);
            writer.WriteStringValue("stan", Stan);
            writer.WriteStringValue("subNetwork", SubNetwork);
            writer.WriteStringValue("tags", Tags);
            writer.WriteStringValue("tid", Tid);
            writer.WriteStringValue("token", Token);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_tranlogAttributes>("tranlogAttributes", TranlogAttributes);
            writer.WriteStringValue("transaction_name", TransactionName);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Internal_authorization_transaction_transactionState>("transactionState", TransactionState);
            writer.WriteStringValue("transactionType", TransactionType);
            writer.WriteDateTimeOffsetValue("transmissionDate", TransmissionDate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
