// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    #pragma warning disable CS1591
    public class Auth_control_exempt_mids_request : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Defines the group of users to which the velocity control applies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Spend_control_association? Association { get; set; }
#nullable restore
#else
        public Spend_control_association Association { get; set; }
#endif
        /// <summary>Date and time when the exception ends, in UTC.</summary>
        public DateTimeOffset? EndTime { get; set; }
        /// <summary>Unique identifier of the merchant group to be exempted.This field is required if there is no entry in the `mid` field.Pass either this field or the `mid` field, not both.For information about merchant groups, see &lt;&lt;/core-api/merchant-groups, Merchant Groups&gt;&gt;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MerchantGroupToken { get; set; }
#nullable restore
#else
        public string MerchantGroupToken { get; set; }
#endif
        /// <summary>Merchant to be exempted.This field is required if there is no entry in the `merchant_group_token` field.Use either this field or the `merchant_group_token` field, not both.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mid { get; set; }
#nullable restore
#else
        public string Mid { get; set; }
#endif
        /// <summary>Name of the merchant identifier authorization control exemption.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Date and time when the exception starts, in UTC.</summary>
        public DateTimeOffset? StartTime { get; set; }
        /// <summary>Unique identifier of the merchant identifier authorization control exemption.If you do not include a token, the system will generate one automatically.This token is necessary for use in other API calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember.This value cannot be updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Auth_control_exempt_mids_request"/> and sets the default values.
        /// </summary>
        public Auth_control_exempt_mids_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Auth_control_exempt_mids_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Auth_control_exempt_mids_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Auth_control_exempt_mids_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"association", n => { Association = n.GetObjectValue<Spend_control_association>(Spend_control_association.CreateFromDiscriminatorValue); } },
                {"end_time", n => { EndTime = n.GetDateTimeOffsetValue(); } },
                {"merchant_group_token", n => { MerchantGroupToken = n.GetStringValue(); } },
                {"mid", n => { Mid = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"start_time", n => { StartTime = n.GetDateTimeOffsetValue(); } },
                {"token", n => { Token = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Spend_control_association>("association", Association);
            writer.WriteDateTimeOffsetValue("end_time", EndTime);
            writer.WriteStringValue("merchant_group_token", MerchantGroupToken);
            writer.WriteStringValue("mid", Mid);
            writer.WriteStringValue("name", Name);
            writer.WriteDateTimeOffsetValue("start_time", StartTime);
            writer.WriteStringValue("token", Token);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
