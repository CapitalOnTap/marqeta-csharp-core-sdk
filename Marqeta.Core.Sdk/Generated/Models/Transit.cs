// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains merchant-provided, transit-related metadata related to the transaction.
    /// </summary>
    public class Transit : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Type of transit transaction.</summary>
        public Transit_transaction_type? TransactionType { get; set; }
        /// <summary>Mode of transportation.</summary>
        public Transit_transportation_mode? TransportationMode { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Transit"/> and sets the default values.
        /// </summary>
        public Transit() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Transit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Transit CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Transit();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"transaction_type", n => { TransactionType = n.GetEnumValue<Transit_transaction_type>(); } },
                {"transportation_mode", n => { TransportationMode = n.GetEnumValue<Transit_transportation_mode>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Transit_transaction_type>("transaction_type", TransactionType);
            writer.WriteEnumValue<Transit_transportation_mode>("transportation_mode", TransportationMode);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
