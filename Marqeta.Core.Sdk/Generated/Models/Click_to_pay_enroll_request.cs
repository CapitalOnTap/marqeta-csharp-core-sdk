// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Click_to_pay_enroll_request : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Basic auth password to access your callback URL if authentication type is basic.If authentication type is basic, both username and password are required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BasicAuthPassword { get; set; }
#nullable restore
#else
        public string BasicAuthPassword { get; set; }
#endif
        /// <summary>Basic auth username to access your callback URL if authentication type is basic.If authentication type is basic, both username and password are required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BasicAuthUsername { get; set; }
#nullable restore
#else
        public string BasicAuthUsername { get; set; }
#endif
        /// <summary>The type of authentication required for the callback URL.* `OAUTH_BEARER_TOKEN`: OAuth bearer token for the callback URL.* `BASIC_AUTH`: Basic auth username and password for the callback URL.</summary>
        public global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_callback_authentication_type? CallbackAuthenticationType { get; set; }
        /// <summary>Randomly chosen string used for implementing HMAC-SHA1.HMAC-SHA1 provides an added layer of security by authenticating the message and validating message integrity.Using this functionality requires that your callback endpoint verify the message signature.For information about implementing this functionality, see &lt;&lt;/developer-guides/signature-verification, Signature Verification&gt;&gt;.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallbackSecretForSignature { get; set; }
#nullable restore
#else
        public string CallbackSecretForSignature { get; set; }
#endif
        /// <summary>The URL to which the Click to Pay request status is sent via webhooks.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CallbackUrl { get; set; }
#nullable restore
#else
        public string CallbackUrl { get; set; }
#endif
        /// <summary>Unique identifier of the card resource.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardToken { get; set; }
#nullable restore
#else
        public string CardToken { get; set; }
#endif
        /// <summary>The user-provided country code.The ISO 3166 country code is a two-letter country code that represents a country.For example, the numeric code for the United States is `US`.The ISO maintains the link:https://www.iso.org/iso-3166-country-codes.html[ISO-3166 country codes, window=&quot;_blank&quot;].</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocaleCountry { get; set; }
#nullable restore
#else
        public string LocaleCountry { get; set; }
#endif
        /// <summary>The user-provided language choice.The ISO 639-2 language code is a two-letter country code that represents a language.The ISO maintains the link:https://id.loc.gov/vocabulary/iso639-2.html[ISO 639-2 language codes, window=&quot;_blank&quot;].</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocaleLanguage { get; set; }
#nullable restore
#else
        public string LocaleLanguage { get; set; }
#endif
        /// <summary>OAuth bearer token to access your callback URL if the `callback_authentication_type` is `OAUTH_BEARER_TOKEN`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OauthBearerToken { get; set; }
#nullable restore
#else
        public string OauthBearerToken { get; set; }
#endif
        /// <summary>User&apos;s email address and mobile phone number with country code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_user_details>? UserDetails { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_user_details> UserDetails { get; set; }
#endif
        /// <summary>Unique identifier of the cardholder.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request"/> and sets the default values.
        /// </summary>
        public Click_to_pay_enroll_request()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "basic_auth_password", n => { BasicAuthPassword = n.GetStringValue(); } },
                { "basic_auth_username", n => { BasicAuthUsername = n.GetStringValue(); } },
                { "callback_authentication_type", n => { CallbackAuthenticationType = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_callback_authentication_type>(); } },
                { "callback_secret_for_signature", n => { CallbackSecretForSignature = n.GetStringValue(); } },
                { "callback_url", n => { CallbackUrl = n.GetStringValue(); } },
                { "card_token", n => { CardToken = n.GetStringValue(); } },
                { "locale_country", n => { LocaleCountry = n.GetStringValue(); } },
                { "locale_language", n => { LocaleLanguage = n.GetStringValue(); } },
                { "oauth_bearer_token", n => { OauthBearerToken = n.GetStringValue(); } },
                { "user_details", n => { UserDetails = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_user_details>(global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_user_details.CreateFromDiscriminatorValue)?.AsList(); } },
                { "user_token", n => { UserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("basic_auth_password", BasicAuthPassword);
            writer.WriteStringValue("basic_auth_username", BasicAuthUsername);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_callback_authentication_type>("callback_authentication_type", CallbackAuthenticationType);
            writer.WriteStringValue("callback_secret_for_signature", CallbackSecretForSignature);
            writer.WriteStringValue("callback_url", CallbackUrl);
            writer.WriteStringValue("card_token", CardToken);
            writer.WriteStringValue("locale_country", LocaleCountry);
            writer.WriteStringValue("locale_language", LocaleLanguage);
            writer.WriteStringValue("oauth_bearer_token", OauthBearerToken);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.Click_to_pay_enroll_request_user_details>("user_details", UserDetails);
            writer.WriteStringValue("user_token", UserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
