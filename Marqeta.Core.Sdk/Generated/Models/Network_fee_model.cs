// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains card network fees assessed against the cardholder.
    /// </summary>
    public class Network_fee_model : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The amount of the network fee.</summary>
        public double? Amount { get; set; }
        /// <summary>Indicates whether the fee is a credit or a debit.* *C* indicates a credit* *D* indicates a debit</summary>
        public Network_fee_model_credit_debit? CreditDebit { get; set; }
        /// <summary>The type of fee assessed by the card network.</summary>
        public Network_fee_model_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Network_fee_model"/> and sets the default values.
        /// </summary>
        public Network_fee_model() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Network_fee_model"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Network_fee_model CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Network_fee_model();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"amount", n => { Amount = n.GetDoubleValue(); } },
                {"credit_debit", n => { CreditDebit = n.GetEnumValue<Network_fee_model_credit_debit>(); } },
                {"type", n => { Type = n.GetEnumValue<Network_fee_model_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteEnumValue<Network_fee_model_credit_debit>("credit_debit", CreditDebit);
            writer.WriteEnumValue<Network_fee_model_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
