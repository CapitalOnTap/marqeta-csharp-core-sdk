// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Response details for a template.
    /// </summary>
    public class PolicyDocumentTemplateResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date and time when the template was created.</summary>
        public DateTimeOffset? TemplateCreatedTime { get; set; }
        /// <summary>Unique identifier of a template, which is a document that serves as an initial disclosure but does not contain finalized values.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TemplateToken { get; set; }
#nullable restore
#else
        public string TemplateToken { get; set; }
#endif
        /// <summary>Contains one or more URLs for a template.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.PolicyDocumentTemplateURLs? TemplateUrls { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.PolicyDocumentTemplateURLs TemplateUrls { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.PolicyDocumentTemplateResponse"/> and sets the default values.
        /// </summary>
        public PolicyDocumentTemplateResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.PolicyDocumentTemplateResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.PolicyDocumentTemplateResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.PolicyDocumentTemplateResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "template_created_time", n => { TemplateCreatedTime = n.GetDateTimeOffsetValue(); } },
                { "template_token", n => { TemplateToken = n.GetStringValue(); } },
                { "template_urls", n => { TemplateUrls = n.GetObjectValue<Marqeta.Core.Sdk.Models.PolicyDocumentTemplateURLs>(Marqeta.Core.Sdk.Models.PolicyDocumentTemplateURLs.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("template_created_time", TemplateCreatedTime);
            writer.WriteStringValue("template_token", TemplateToken);
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.PolicyDocumentTemplateURLs>("template_urls", TemplateUrls);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
