// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    public class Ach_partner_request_model : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Required if &apos;user_token&apos; is null</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessToken { get; set; }
#nullable restore
#else
        public string BusinessToken { get; set; }
#endif
        /// <summary>The idempotentHash property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IdempotentHash { get; set; }
#nullable restore
#else
        public string IdempotentHash { get; set; }
#endif
        /// <summary>If there are multiple funding sources, this field specifies which source is used by default in funding calls.If there is only one funding source, the system ignores this field and always uses that source.</summary>
        public bool? IsDefaultAccount { get; set; }
        /// <summary>Name of the partner who validated the account holder.Returned when a third-party partner was used for account validation.</summary>
        public Ach_partner_request_model_partner? Partner { get; set; }
        /// <summary>Supplied by the account validation partner, this value is a reference to the account holder&apos;s details, such as the account number and routing number.Returned when a third-party partner was used for account validation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PartnerAccountLinkReferenceToken { get; set; }
#nullable restore
#else
        public string PartnerAccountLinkReferenceToken { get; set; }
#endif
        /// <summary>Unique identifier of the funding source.If you do not include a token, the system will generate one automatically.This token is necessary for use in other calls, so we recommend that rather than let the system generate one, you use a simple string that is easy to remember.This value cannot be updated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Supplied by the account validation partner, this value is a reference to the account holder&apos;s details, such as the account number and routing number.This token is required if a `business_token` is not specified.Send a `GET` request to `/users` to retrieve user tokens.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserToken { get; set; }
#nullable restore
#else
        public string UserToken { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Ach_partner_request_model"/> and sets the default values.
        /// </summary>
        public Ach_partner_request_model() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Ach_partner_request_model"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Ach_partner_request_model CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Ach_partner_request_model();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"business_token", n => { BusinessToken = n.GetStringValue(); } },
                {"idempotentHash", n => { IdempotentHash = n.GetStringValue(); } },
                {"is_default_account", n => { IsDefaultAccount = n.GetBoolValue(); } },
                {"partner", n => { Partner = n.GetEnumValue<Ach_partner_request_model_partner>(); } },
                {"partner_account_link_reference_token", n => { PartnerAccountLinkReferenceToken = n.GetStringValue(); } },
                {"token", n => { Token = n.GetStringValue(); } },
                {"user_token", n => { UserToken = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("business_token", BusinessToken);
            writer.WriteStringValue("idempotentHash", IdempotentHash);
            writer.WriteBoolValue("is_default_account", IsDefaultAccount);
            writer.WriteEnumValue<Ach_partner_request_model_partner>("partner", Partner);
            writer.WriteStringValue("partner_account_link_reference_token", PartnerAccountLinkReferenceToken);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("user_token", UserToken);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
