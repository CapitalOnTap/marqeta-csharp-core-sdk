// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Defines the rules intended for a reward policy.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PolicyRewardPlatformRule : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The static amount to reward if the rule conditions are met.</summary>
        public double? Amount { get; set; }
        /// <summary>Additional properties for which the rule can be used to determine reward accrual eligibility for a transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.PolicyRewardRuleAttributes? Attributes { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.PolicyRewardRuleAttributes Attributes { get; set; }
#endif
        /// <summary>Type of calculation to use to evaluate if a rule has been satisfied.</summary>
        public global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule_calculation_type? CalculationType { get; set; }
        /// <summary>The description of the rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The reward multiplier to apply the transaction, where &apos;1&apos; means 1x transaction amount.</summary>
        public float? Multiplier { get; set; }
        /// <summary>Type of rule.</summary>
        public global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule"/> and sets the default values.
        /// </summary>
        public PolicyRewardPlatformRule()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "attributes", n => { Attributes = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.PolicyRewardRuleAttributes>(global::Marqeta.Core.Sdk.Models.PolicyRewardRuleAttributes.CreateFromDiscriminatorValue); } },
                { "calculation_type", n => { CalculationType = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule_calculation_type>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "multiplier", n => { Multiplier = n.GetFloatValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.PolicyRewardRuleAttributes>("attributes", Attributes);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule_calculation_type>("calculation_type", CalculationType);
            writer.WriteStringValue("description", Description);
            writer.WriteFloatValue("multiplier", Multiplier);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.PolicyRewardPlatformRule_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
