// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Specifies attributes of the card carrier.
    /// </summary>
    public class Carrier : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies an image to display on the card carrier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoFile { get; set; }
#nullable restore
#else
        public string LogoFile { get; set; }
#endif
        /// <summary>Specifies a thumbnail-sized rendering of the image specified in the `logo_file` field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LogoThumbnailFile { get; set; }
#nullable restore
#else
        public string LogoThumbnailFile { get; set; }
#endif
        /// <summary>Specifies a text file containing a custom message to print on the card carrier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageFile { get; set; }
#nullable restore
#else
        public string MessageFile { get; set; }
#endif
        /// <summary>Specifies a custom message that appears on the card carrier.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MessageLine { get; set; }
#nullable restore
#else
        public string MessageLine { get; set; }
#endif
        /// <summary>Specifies the card carrier template to use.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TemplateId { get; set; }
#nullable restore
#else
        public string TemplateId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Carrier"/> and sets the default values.
        /// </summary>
        public Carrier() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Carrier"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Carrier CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Carrier();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"logo_file", n => { LogoFile = n.GetStringValue(); } },
                {"logo_thumbnail_file", n => { LogoThumbnailFile = n.GetStringValue(); } },
                {"message_file", n => { MessageFile = n.GetStringValue(); } },
                {"message_line", n => { MessageLine = n.GetStringValue(); } },
                {"template_id", n => { TemplateId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("logo_file", LogoFile);
            writer.WriteStringValue("logo_thumbnail_file", LogoThumbnailFile);
            writer.WriteStringValue("message_file", MessageFile);
            writer.WriteStringValue("message_line", MessageLine);
            writer.WriteStringValue("template_id", TemplateId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
