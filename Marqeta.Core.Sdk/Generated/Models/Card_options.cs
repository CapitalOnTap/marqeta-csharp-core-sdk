// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    public class Card_options : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The billing_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Marqeta.Core.Sdk.Models.BillingAddress? BillingAddress { get; set; }
#nullable restore
#else
        public Marqeta.Core.Sdk.Models.BillingAddress BillingAddress { get; set; }
#endif
        /// <summary>The card_present property</summary>
        public bool? CardPresent { get; set; }
        /// <summary>The cvv property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Cvv { get; set; }
#nullable restore
#else
        public string Cvv { get; set; }
#endif
        /// <summary>The expiration property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expiration { get; set; }
#nullable restore
#else
        public string Expiration { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Card_options"/> and sets the default values.
        /// </summary>
        public Card_options() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Card_options"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Card_options CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Card_options();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"billing_address", n => { BillingAddress = n.GetObjectValue<Marqeta.Core.Sdk.Models.BillingAddress>(Marqeta.Core.Sdk.Models.BillingAddress.CreateFromDiscriminatorValue); } },
                {"card_present", n => { CardPresent = n.GetBoolValue(); } },
                {"cvv", n => { Cvv = n.GetStringValue(); } },
                {"expiration", n => { Expiration = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Marqeta.Core.Sdk.Models.BillingAddress>("billing_address", BillingAddress);
            writer.WriteBoolValue("card_present", CardPresent);
            writer.WriteStringValue("cvv", Cvv);
            writer.WriteStringValue("expiration", Expiration);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
