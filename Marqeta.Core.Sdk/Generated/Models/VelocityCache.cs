// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class VelocityCache : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cardHolderId property</summary>
        public long? CardHolderId { get; set; }
        /// <summary>The createdTime property</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>The lastModifiedTime property</summary>
        public DateTimeOffset? LastModifiedTime { get; set; }
        /// <summary>The maxId property</summary>
        public long? MaxId { get; set; }
        /// <summary>The usageCount property</summary>
        public int? UsageCount { get; set; }
        /// <summary>The usedAmount property</summary>
        public double? UsedAmount { get; set; }
        /// <summary>The vcSignature property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VcSignature { get; set; }
#nullable restore
#else
        public string VcSignature { get; set; }
#endif
        /// <summary>The velocityControlId property</summary>
        public long? VelocityControlId { get; set; }
        /// <summary>The windowStartTime property</summary>
        public DateTimeOffset? WindowStartTime { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.VelocityCache"/> and sets the default values.
        /// </summary>
        public VelocityCache()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.VelocityCache"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.VelocityCache CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.VelocityCache();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cardHolderId", n => { CardHolderId = n.GetLongValue(); } },
                { "createdTime", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "lastModifiedTime", n => { LastModifiedTime = n.GetDateTimeOffsetValue(); } },
                { "maxId", n => { MaxId = n.GetLongValue(); } },
                { "usageCount", n => { UsageCount = n.GetIntValue(); } },
                { "usedAmount", n => { UsedAmount = n.GetDoubleValue(); } },
                { "vcSignature", n => { VcSignature = n.GetStringValue(); } },
                { "velocityControlId", n => { VelocityControlId = n.GetLongValue(); } },
                { "windowStartTime", n => { WindowStartTime = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("cardHolderId", CardHolderId);
            writer.WriteDateTimeOffsetValue("createdTime", CreatedTime);
            writer.WriteDateTimeOffsetValue("lastModifiedTime", LastModifiedTime);
            writer.WriteLongValue("maxId", MaxId);
            writer.WriteIntValue("usageCount", UsageCount);
            writer.WriteDoubleValue("usedAmount", UsedAmount);
            writer.WriteStringValue("vcSignature", VcSignature);
            writer.WriteLongValue("velocityControlId", VelocityControlId);
            writer.WriteDateTimeOffsetValue("windowStartTime", WindowStartTime);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
