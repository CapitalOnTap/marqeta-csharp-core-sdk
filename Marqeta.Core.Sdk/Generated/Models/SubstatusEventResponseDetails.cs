// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Details of an event related to a substatus.
    /// </summary>
    public class SubstatusEventResponseDetails : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The channel through which the event occurred.</summary>
        public Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails_channel? Channel { get; set; }
        /// <summary>Creation time of the event.</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>Effective date of the event, in UTC.</summary>
        public DateTimeOffset? EffectiveDate { get; set; }
        /// <summary>Reason for the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>The state of the event</summary>
        public Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails_state? State { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails"/> and sets the default values.
        /// </summary>
        public SubstatusEventResponseDetails()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "channel", n => { Channel = n.GetEnumValue<Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails_channel>(); } },
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "effective_date", n => { EffectiveDate = n.GetDateTimeOffsetValue(); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "state", n => { State = n.GetEnumValue<Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails_state>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails_channel>("channel", Channel);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteDateTimeOffsetValue("effective_date", EffectiveDate);
            writer.WriteStringValue("reason", Reason);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.SubstatusEventResponseDetails_state>("state", State);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
