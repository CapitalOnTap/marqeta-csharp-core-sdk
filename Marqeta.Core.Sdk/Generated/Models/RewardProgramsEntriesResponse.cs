// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class RewardProgramsEntriesResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date and time when the reward entry was created on the Marqeta platform, in UTC.</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>Merchant category code (MCC) of the related journal entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mcc { get; set; }
#nullable restore
#else
        public string Mcc { get; set; }
#endif
        /// <summary>Merchant identifier (MID) of the related journal entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mid { get; set; }
#nullable restore
#else
        public string Mid { get; set; }
#endif
        /// <summary>A note providing information on the reward entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Note { get; set; }
#nullable restore
#else
        public string Note { get; set; }
#endif
        /// <summary>Unique identifier of the related journal entry to which the reward rule was applied to trigger the reward entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RelatedJournalEntryToken { get; set; }
#nullable restore
#else
        public string RelatedJournalEntryToken { get; set; }
#endif
        /// <summary>Unique identifier of the related redemption token that triggered the reward entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RelatedRedemptionToken { get; set; }
#nullable restore
#else
        public string RelatedRedemptionToken { get; set; }
#endif
        /// <summary>Unique identifier of the reward program for which to return reward entries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RewardProgramToken { get; set; }
#nullable restore
#else
        public string RewardProgramToken { get; set; }
#endif
        /// <summary>Unique identifier of the reward rules config used to determine the value of the reward entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RewardRulesConfigToken { get; set; }
#nullable restore
#else
        public string RewardRulesConfigToken { get; set; }
#endif
        /// <summary>Status of the reward entry.</summary>
        public global::Marqeta.Core.Sdk.Models.RewardEntryStatus? Status { get; set; }
        /// <summary>Unique identifier of the reward entry.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The transaction amount to which the reward rule was applied.Used to determine the value of the reward entry.</summary>
        public decimal? TransactionAmount { get; set; }
        /// <summary>Value of the reward entry.</summary>
        public decimal? Value { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.RewardProgramsEntriesResponse"/> and sets the default values.
        /// </summary>
        public RewardProgramsEntriesResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.RewardProgramsEntriesResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.RewardProgramsEntriesResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.RewardProgramsEntriesResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "mcc", n => { Mcc = n.GetStringValue(); } },
                { "mid", n => { Mid = n.GetStringValue(); } },
                { "note", n => { Note = n.GetStringValue(); } },
                { "related_journal_entry_token", n => { RelatedJournalEntryToken = n.GetStringValue(); } },
                { "related_redemption_token", n => { RelatedRedemptionToken = n.GetStringValue(); } },
                { "reward_program_token", n => { RewardProgramToken = n.GetStringValue(); } },
                { "reward_rules_config_token", n => { RewardRulesConfigToken = n.GetStringValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.RewardEntryStatus>(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "transaction_amount", n => { TransactionAmount = n.GetDecimalValue(); } },
                { "value", n => { Value = n.GetDecimalValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteStringValue("mcc", Mcc);
            writer.WriteStringValue("mid", Mid);
            writer.WriteStringValue("note", Note);
            writer.WriteStringValue("related_journal_entry_token", RelatedJournalEntryToken);
            writer.WriteStringValue("related_redemption_token", RelatedRedemptionToken);
            writer.WriteStringValue("reward_program_token", RewardProgramToken);
            writer.WriteStringValue("reward_rules_config_token", RewardRulesConfigToken);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.RewardEntryStatus>("status", Status);
            writer.WriteStringValue("token", Token);
            writer.WriteDecimalValue("transaction_amount", TransactionAmount);
            writer.WriteDecimalValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
