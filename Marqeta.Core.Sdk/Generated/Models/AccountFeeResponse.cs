// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains information returned for account fee.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class AccountFeeResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Unique identifier of the credit account on which the fee was made.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountToken { get; set; }
#nullable restore
#else
        public string AccountToken { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Amount of the fee.</summary>
        public double? Amount { get; set; }
        /// <summary>The amount to which the fee was applied (applicable only for certain fees).</summary>
        public double? AppliedToAmount { get; set; }
        /// <summary>Indicates how the fee was created.</summary>
        public global::Marqeta.Core.Sdk.Models.AccountFeeResponse_channel? Channel { get; set; }
        /// <summary>Date and time when the account fee was applied, in UTC.</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>Valid three-digit link:https://www.iso.org/iso-4217-currency-codes.html[ISO 4217 currency code, window=&quot;_blank&quot;].</summary>
        public global::Marqeta.Core.Sdk.Models.CurrencyCode? CurrencyCode { get; set; }
        /// <summary>Description of the fee.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The journal_tokens property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? JournalTokens { get; set; }
#nullable restore
#else
        public List<string> JournalTokens { get; set; }
#endif
        /// <summary>The way fee is calculated.</summary>
        public global::Marqeta.Core.Sdk.Models.AccountFeeResponse_method? Method { get; set; }
        /// <summary>Status of the fee.</summary>
        public global::Marqeta.Core.Sdk.Models.AccountFeeResponse_status? Status { get; set; }
        /// <summary>Subtype of fee.</summary>
        public global::Marqeta.Core.Sdk.Models.AccountFeeResponse_subtype? Subtype { get; set; }
        /// <summary>Unique identifier of the fee.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>Type of fee.</summary>
        public global::Marqeta.Core.Sdk.Models.AccountFeeResponse_type? Type { get; set; }
        /// <summary>Value of the fee.</summary>
        public double? Value { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.AccountFeeResponse"/> and sets the default values.
        /// </summary>
        public AccountFeeResponse()
        {
            AdditionalData = new Dictionary<string, object>();
            CurrencyCode = global::Marqeta.Core.Sdk.Models.CurrencyCode.USD;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.AccountFeeResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.AccountFeeResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.AccountFeeResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_token", n => { AccountToken = n.GetStringValue(); } },
                { "amount", n => { Amount = n.GetDoubleValue(); } },
                { "applied_to_amount", n => { AppliedToAmount = n.GetDoubleValue(); } },
                { "channel", n => { Channel = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_channel>(); } },
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "currency_code", n => { CurrencyCode = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.CurrencyCode>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "journal_tokens", n => { JournalTokens = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "method", n => { Method = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_method>(); } },
                { "status", n => { Status = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_status>(); } },
                { "subtype", n => { Subtype = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_subtype>(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_type>(); } },
                { "value", n => { Value = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_token", AccountToken);
            writer.WriteDoubleValue("amount", Amount);
            writer.WriteDoubleValue("applied_to_amount", AppliedToAmount);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_channel>("channel", Channel);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.CurrencyCode>("currency_code", CurrencyCode);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfPrimitiveValues<string>("journal_tokens", JournalTokens);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_method>("method", Method);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_status>("status", Status);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_subtype>("subtype", Subtype);
            writer.WriteStringValue("token", Token);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.AccountFeeResponse_type>("type", Type);
            writer.WriteDoubleValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
