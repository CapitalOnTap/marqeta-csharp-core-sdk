// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Business_card_holder_response : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The account_holder_group_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountHolderGroupToken { get; set; }
#nullable restore
#else
        public string AccountHolderGroupToken { get; set; }
#endif
        /// <summary>default = true</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The attestation_consent property</summary>
        public bool? AttestationConsent { get; set; }
        /// <summary>The attestation_date property</summary>
        public DateTimeOffset? AttestationDate { get; set; }
        /// <summary>The attester_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AttesterName { get; set; }
#nullable restore
#else
        public string AttesterName { get; set; }
#endif
        /// <summary>The attester_title property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AttesterTitle { get; set; }
#nullable restore
#else
        public string AttesterTitle { get; set; }
#endif
        /// <summary>Contains the cardholder&apos;s email address and password information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Authentication? Authentication { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Authentication Authentication { get; set; }
#endif
        /// <summary>The beneficial_owner1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response? BeneficialOwner1 { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response BeneficialOwner1 { get; set; }
#endif
        /// <summary>The beneficial_owner2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response? BeneficialOwner2 { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response BeneficialOwner2 { get; set; }
#endif
        /// <summary>The beneficial_owner3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response? BeneficialOwner3 { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response BeneficialOwner3 { get; set; }
#endif
        /// <summary>The beneficial_owner4 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response? BeneficialOwner4 { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Beneficial_owner_response BeneficialOwner4 { get; set; }
#endif
        /// <summary>The business_name_dba property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessNameDba { get; set; }
#nullable restore
#else
        public string BusinessNameDba { get; set; }
#endif
        /// <summary>The business_name_legal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessNameLegal { get; set; }
#nullable restore
#else
        public string BusinessNameLegal { get; set; }
#endif
        /// <summary>The business_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BusinessType { get; set; }
#nullable restore
#else
        public string BusinessType { get; set; }
#endif
        /// <summary>yyyy-MM-ddTHH:mm:ssZ</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>The date_established property</summary>
        public DateTimeOffset? DateEstablished { get; set; }
        /// <summary>The duns_number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DunsNumber { get; set; }
#nullable restore
#else
        public string DunsNumber { get; set; }
#endif
        /// <summary>The general_business_description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GeneralBusinessDescription { get; set; }
#nullable restore
#else
        public string GeneralBusinessDescription { get; set; }
#endif
        /// <summary>The history property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? History { get; set; }
#nullable restore
#else
        public string History { get; set; }
#endif
        /// <summary>The identifications property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.Models.IdentificationResponseModel>? Identifications { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.Models.IdentificationResponseModel> Identifications { get; set; }
#endif
        /// <summary>The incorporation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Business_incorporation_response? Incorporation { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Business_incorporation_response Incorporation { get; set; }
#endif
        /// <summary>The in_current_location_since property</summary>
        public DateTimeOffset? InCurrentLocationSince { get; set; }
        /// <summary>The international_office_locations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InternationalOfficeLocations { get; set; }
#nullable restore
#else
        public string InternationalOfficeLocations { get; set; }
#endif
        /// <summary>The ip_address property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>yyyy-MM-ddTHH:mm:ssZ</summary>
        public DateTimeOffset? LastModifiedTime { get; set; }
        /// <summary>The metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Business_card_holder_response_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Business_card_holder_response_metadata Metadata { get; set; }
#endif
        /// <summary>The notes property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>The office_location property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.AddressResponseModel? OfficeLocation { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.AddressResponseModel OfficeLocation { get; set; }
#endif
        /// <summary>Strong password required</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Password { get; set; }
#nullable restore
#else
        public string Password { get; set; }
#endif
        /// <summary>The phone property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Phone { get; set; }
#nullable restore
#else
        public string Phone { get; set; }
#endif
        /// <summary>The primary_contact property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.PrimaryContactInfoModel? PrimaryContact { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.PrimaryContactInfoModel PrimaryContact { get; set; }
#endif
        /// <summary>The proprietor_is_beneficial_owner property</summary>
        public bool? ProprietorIsBeneficialOwner { get; set; }
        /// <summary>The proprietor_or_officer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Business_proprietor_response? ProprietorOrOfficer { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Business_proprietor_response ProprietorOrOfficer { get; set; }
#endif
        /// <summary>The status property</summary>
        public global::Marqeta.Core.Sdk.Models.Business_card_holder_response_status? Status { get; set; }
        /// <summary>The taxpayer_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxpayerId { get; set; }
#nullable restore
#else
        public string TaxpayerId { get; set; }
#endif
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>The website property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Website { get; set; }
#nullable restore
#else
        public string Website { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Business_card_holder_response"/> and sets the default values.
        /// </summary>
        public Business_card_holder_response()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Business_card_holder_response"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Business_card_holder_response CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Business_card_holder_response();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account_holder_group_token", n => { AccountHolderGroupToken = n.GetStringValue(); } },
                { "active", n => { Active = n.GetBoolValue(); } },
                { "attestation_consent", n => { AttestationConsent = n.GetBoolValue(); } },
                { "attestation_date", n => { AttestationDate = n.GetDateTimeOffsetValue(); } },
                { "attester_name", n => { AttesterName = n.GetStringValue(); } },
                { "attester_title", n => { AttesterTitle = n.GetStringValue(); } },
                { "authentication", n => { Authentication = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Authentication>(global::Marqeta.Core.Sdk.Models.Authentication.CreateFromDiscriminatorValue); } },
                { "beneficial_owner1", n => { BeneficialOwner1 = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>(global::Marqeta.Core.Sdk.Models.Beneficial_owner_response.CreateFromDiscriminatorValue); } },
                { "beneficial_owner2", n => { BeneficialOwner2 = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>(global::Marqeta.Core.Sdk.Models.Beneficial_owner_response.CreateFromDiscriminatorValue); } },
                { "beneficial_owner3", n => { BeneficialOwner3 = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>(global::Marqeta.Core.Sdk.Models.Beneficial_owner_response.CreateFromDiscriminatorValue); } },
                { "beneficial_owner4", n => { BeneficialOwner4 = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>(global::Marqeta.Core.Sdk.Models.Beneficial_owner_response.CreateFromDiscriminatorValue); } },
                { "business_name_dba", n => { BusinessNameDba = n.GetStringValue(); } },
                { "business_name_legal", n => { BusinessNameLegal = n.GetStringValue(); } },
                { "business_type", n => { BusinessType = n.GetStringValue(); } },
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "date_established", n => { DateEstablished = n.GetDateTimeOffsetValue(); } },
                { "duns_number", n => { DunsNumber = n.GetStringValue(); } },
                { "general_business_description", n => { GeneralBusinessDescription = n.GetStringValue(); } },
                { "history", n => { History = n.GetStringValue(); } },
                { "identifications", n => { Identifications = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.IdentificationResponseModel>(global::Marqeta.Core.Sdk.Models.IdentificationResponseModel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "in_current_location_since", n => { InCurrentLocationSince = n.GetDateTimeOffsetValue(); } },
                { "incorporation", n => { Incorporation = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Business_incorporation_response>(global::Marqeta.Core.Sdk.Models.Business_incorporation_response.CreateFromDiscriminatorValue); } },
                { "international_office_locations", n => { InternationalOfficeLocations = n.GetStringValue(); } },
                { "ip_address", n => { IpAddress = n.GetStringValue(); } },
                { "last_modified_time", n => { LastModifiedTime = n.GetDateTimeOffsetValue(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Business_card_holder_response_metadata>(global::Marqeta.Core.Sdk.Models.Business_card_holder_response_metadata.CreateFromDiscriminatorValue); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "office_location", n => { OfficeLocation = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.AddressResponseModel>(global::Marqeta.Core.Sdk.Models.AddressResponseModel.CreateFromDiscriminatorValue); } },
                { "password", n => { Password = n.GetStringValue(); } },
                { "phone", n => { Phone = n.GetStringValue(); } },
                { "primary_contact", n => { PrimaryContact = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.PrimaryContactInfoModel>(global::Marqeta.Core.Sdk.Models.PrimaryContactInfoModel.CreateFromDiscriminatorValue); } },
                { "proprietor_is_beneficial_owner", n => { ProprietorIsBeneficialOwner = n.GetBoolValue(); } },
                { "proprietor_or_officer", n => { ProprietorOrOfficer = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Business_proprietor_response>(global::Marqeta.Core.Sdk.Models.Business_proprietor_response.CreateFromDiscriminatorValue); } },
                { "status", n => { Status = n.GetEnumValue<global::Marqeta.Core.Sdk.Models.Business_card_holder_response_status>(); } },
                { "taxpayer_id", n => { TaxpayerId = n.GetStringValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
                { "website", n => { Website = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account_holder_group_token", AccountHolderGroupToken);
            writer.WriteBoolValue("active", Active);
            writer.WriteBoolValue("attestation_consent", AttestationConsent);
            writer.WriteDateTimeOffsetValue("attestation_date", AttestationDate);
            writer.WriteStringValue("attester_name", AttesterName);
            writer.WriteStringValue("attester_title", AttesterTitle);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Authentication>("authentication", Authentication);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>("beneficial_owner1", BeneficialOwner1);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>("beneficial_owner2", BeneficialOwner2);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>("beneficial_owner3", BeneficialOwner3);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Beneficial_owner_response>("beneficial_owner4", BeneficialOwner4);
            writer.WriteStringValue("business_name_dba", BusinessNameDba);
            writer.WriteStringValue("business_name_legal", BusinessNameLegal);
            writer.WriteStringValue("business_type", BusinessType);
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteDateTimeOffsetValue("date_established", DateEstablished);
            writer.WriteStringValue("duns_number", DunsNumber);
            writer.WriteStringValue("general_business_description", GeneralBusinessDescription);
            writer.WriteStringValue("history", History);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.IdentificationResponseModel>("identifications", Identifications);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Business_incorporation_response>("incorporation", Incorporation);
            writer.WriteDateTimeOffsetValue("in_current_location_since", InCurrentLocationSince);
            writer.WriteStringValue("international_office_locations", InternationalOfficeLocations);
            writer.WriteStringValue("ip_address", IpAddress);
            writer.WriteDateTimeOffsetValue("last_modified_time", LastModifiedTime);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Business_card_holder_response_metadata>("metadata", Metadata);
            writer.WriteStringValue("notes", Notes);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.AddressResponseModel>("office_location", OfficeLocation);
            writer.WriteStringValue("password", Password);
            writer.WriteStringValue("phone", Phone);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.PrimaryContactInfoModel>("primary_contact", PrimaryContact);
            writer.WriteBoolValue("proprietor_is_beneficial_owner", ProprietorIsBeneficialOwner);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Business_proprietor_response>("proprietor_or_officer", ProprietorOrOfficer);
            writer.WriteEnumValue<global::Marqeta.Core.Sdk.Models.Business_card_holder_response_status>("status", Status);
            writer.WriteStringValue("taxpayer_id", TaxpayerId);
            writer.WriteStringValue("token", Token);
            writer.WriteStringValue("website", Website);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
