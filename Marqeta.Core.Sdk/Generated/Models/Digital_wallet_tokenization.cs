// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Controls characteristics related to digital wallets.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Digital_wallet_tokenization : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Specifies the digital wallet card art identifier for the card product.The card art identifier also includes card metadata, such as terms and conditions, card product information, contact information, Apple Pay requirements, Android Pay requirements, wallet profiles, rule sets, terminal profiles, authorization profiles, message profiles, and activation profiles.Digital wallets display the card art after the initial token has been provisioned and activated.Digital wallet card art is updated for all wallets automatically whenever a tokenized card is reissued or replaced.* If your card program is Managed by Marqeta, Marqeta populates this field on your behalf.* If your card program is Powered by Marqeta, you can obtain the correct card art identifier directly from Visa or Mastercard.If this field is left blank, your card product inherits the card art assigned to the account BIN range.For more information about this field, contact your Marqeta representative.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardArtId { get; set; }
#nullable restore
#else
        public string CardArtId { get; set; }
#endif
        /// <summary>The provisioning_controls property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Marqeta.Core.Sdk.Models.Provisioning_controls? ProvisioningControls { get; set; }
#nullable restore
#else
        public global::Marqeta.Core.Sdk.Models.Provisioning_controls ProvisioningControls { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Digital_wallet_tokenization"/> and sets the default values.
        /// </summary>
        public Digital_wallet_tokenization()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Digital_wallet_tokenization"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Digital_wallet_tokenization CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Digital_wallet_tokenization();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "card_art_id", n => { CardArtId = n.GetStringValue(); } },
                { "provisioning_controls", n => { ProvisioningControls = n.GetObjectValue<global::Marqeta.Core.Sdk.Models.Provisioning_controls>(global::Marqeta.Core.Sdk.Models.Provisioning_controls.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("card_art_id", CardArtId);
            writer.WriteObjectValue<global::Marqeta.Core.Sdk.Models.Provisioning_controls>("provisioning_controls", ProvisioningControls);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
