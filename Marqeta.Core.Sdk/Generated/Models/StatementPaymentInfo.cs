// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains information on a statement payment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class StatementPaymentInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Date and time when the statement payment information was created on Marqeta&apos;s credit platform, in UTC.</summary>
        public DateTimeOffset? CreatedTime { get; set; }
        /// <summary>Minimum payment amount for the current statement period, based on the associated credit product settings.</summary>
        public double? MinimumPaymentDue { get; set; }
        /// <summary>Balance on the credit account when the statement period ended.</summary>
        public double? NewStatementBalance { get; set; }
        /// <summary>Last day a payment can be made before interest and fees are charged to the account.</summary>
        public DateTimeOffset? PaymentCutoffDate { get; set; }
        /// <summary>Payment due date, based on the credit account settings.</summary>
        public DateTimeOffset? PaymentDueDate { get; set; }
        /// <summary>Unique identifier of the statement summary.</summary>
        public Guid? StatementSummaryToken { get; set; }
        /// <summary>Savings amount if the balance is paid off in three years versus only making minimum payments.</summary>
        public double? ThreeYearSavings { get; set; }
        /// <summary>Unique identifier of the statement payment.</summary>
        public Guid? Token { get; set; }
        /// <summary>One or more payoff warnings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Marqeta.Core.Sdk.Models.StatementPaymentWarning>? Warnings { get; set; }
#nullable restore
#else
        public List<global::Marqeta.Core.Sdk.Models.StatementPaymentWarning> Warnings { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.StatementPaymentInfo"/> and sets the default values.
        /// </summary>
        public StatementPaymentInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.StatementPaymentInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.StatementPaymentInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.StatementPaymentInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "created_time", n => { CreatedTime = n.GetDateTimeOffsetValue(); } },
                { "minimum_payment_due", n => { MinimumPaymentDue = n.GetDoubleValue(); } },
                { "new_statement_balance", n => { NewStatementBalance = n.GetDoubleValue(); } },
                { "payment_cutoff_date", n => { PaymentCutoffDate = n.GetDateTimeOffsetValue(); } },
                { "payment_due_date", n => { PaymentDueDate = n.GetDateTimeOffsetValue(); } },
                { "statement_summary_token", n => { StatementSummaryToken = n.GetGuidValue(); } },
                { "three_year_savings", n => { ThreeYearSavings = n.GetDoubleValue(); } },
                { "token", n => { Token = n.GetGuidValue(); } },
                { "warnings", n => { Warnings = n.GetCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.StatementPaymentWarning>(global::Marqeta.Core.Sdk.Models.StatementPaymentWarning.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("created_time", CreatedTime);
            writer.WriteDoubleValue("minimum_payment_due", MinimumPaymentDue);
            writer.WriteDoubleValue("new_statement_balance", NewStatementBalance);
            writer.WriteDateTimeOffsetValue("payment_cutoff_date", PaymentCutoffDate);
            writer.WriteDateTimeOffsetValue("payment_due_date", PaymentDueDate);
            writer.WriteGuidValue("statement_summary_token", StatementSummaryToken);
            writer.WriteDoubleValue("three_year_savings", ThreeYearSavings);
            writer.WriteGuidValue("token", Token);
            writer.WriteCollectionOfObjectValues<global::Marqeta.Core.Sdk.Models.StatementPaymentWarning>("warnings", Warnings);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
