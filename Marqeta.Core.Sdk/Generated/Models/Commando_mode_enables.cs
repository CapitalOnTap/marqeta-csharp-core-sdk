// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Defines program behavior when Commando Mode is enabled.
    /// </summary>
    public class Commando_mode_enables : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Unique identifiers of the authorization controls enabled while in Commando Mode.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthControls { get; set; }
#nullable restore
#else
        public List<string> AuthControls { get; set; }
#endif
        /// <summary>If set to `true`, transactions conducted while Commando Mode is enabled proceed even when the card is suspended.If set to `false`, transactions conducted while Commando Mode is enabled are declined if the card is suspended.</summary>
        public bool? IgnoreCardSuspendedState { get; set; }
        /// <summary>Unique identifier of the program funding source that substitutes for the program gateway funding source upon Commando Mode enablement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProgramFundingSource { get; set; }
#nullable restore
#else
        public string ProgramFundingSource { get; set; }
#endif
        /// <summary>This field is not currently in use.</summary>
        public bool? UseCacheBalance { get; set; }
        /// <summary>Unique identifiers of the velocity controls enabled while in Commando Mode.Velocity controls that are enabled in Commando Mode are inactive until a Commando Mode event occurs.When Commando Mode velocity controls are activated, they conform to the `velocity_window` specified in that velocity control.For example, a `velocity_window` of `DAY` is one calendar day starting at 00:00:00 UTC.If a Commando Mode event occurs at 11:59:59 UTC, the `DAY` window includes all transactions that occurred between 00:00:00 and 11:59:59 on that calendar day.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? VelocityControls { get; set; }
#nullable restore
#else
        public List<string> VelocityControls { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Commando_mode_enables"/> and sets the default values.
        /// </summary>
        public Commando_mode_enables()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Commando_mode_enables"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Commando_mode_enables CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Commando_mode_enables();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"auth_controls", n => { AuthControls = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"ignore_card_suspended_state", n => { IgnoreCardSuspendedState = n.GetBoolValue(); } },
                {"program_funding_source", n => { ProgramFundingSource = n.GetStringValue(); } },
                {"use_cache_balance", n => { UseCacheBalance = n.GetBoolValue(); } },
                {"velocity_controls", n => { VelocityControls = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("auth_controls", AuthControls);
            writer.WriteBoolValue("ignore_card_suspended_state", IgnoreCardSuspendedState);
            writer.WriteStringValue("program_funding_source", ProgramFundingSource);
            writer.WriteBoolValue("use_cache_balance", UseCacheBalance);
            writer.WriteCollectionOfPrimitiveValues<string>("velocity_controls", VelocityControls);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
