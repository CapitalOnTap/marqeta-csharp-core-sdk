// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// One or more delinquency buckets for an account.Each delinquency bucket represents a billing cycle during which the account was delinquent.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DelinquencyBucketResponse : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Delinquency bucket number in the returned array.Delinquency buckets are returned from most recent to least; the most recent delinquency bucket is `1`.</summary>
        public int? BucketNumber { get; set; }
        /// <summary>Current amount that is due for this delinquency bucket.</summary>
        public double? CurrentDue { get; set; }
        /// <summary>Total number of days that the payment is past due for this delinquency bucket.</summary>
        public int? DaysPastDue { get; set; }
        /// <summary>Amount that is past due and carried forward from previous delinquency buckets.</summary>
        public double? PastDueCarriedForward { get; set; }
        /// <summary>Date that the payment was due for this delinquency bucket.</summary>
        public DateTimeOffset? PaymentDueDate { get; set; }
        /// <summary>Total amount that is due for this delinquency bucket; the sum of `past_due_carried_forward` and `current_due`.</summary>
        public double? TotalDue { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.DelinquencyBucketResponse"/> and sets the default values.
        /// </summary>
        public DelinquencyBucketResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.DelinquencyBucketResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.DelinquencyBucketResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.DelinquencyBucketResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bucket_number", n => { BucketNumber = n.GetIntValue(); } },
                { "current_due", n => { CurrentDue = n.GetDoubleValue(); } },
                { "days_past_due", n => { DaysPastDue = n.GetIntValue(); } },
                { "past_due_carried_forward", n => { PastDueCarriedForward = n.GetDoubleValue(); } },
                { "payment_due_date", n => { PaymentDueDate = n.GetDateTimeOffsetValue(); } },
                { "total_due", n => { TotalDue = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("bucket_number", BucketNumber);
            writer.WriteDoubleValue("current_due", CurrentDue);
            writer.WriteIntValue("days_past_due", DaysPastDue);
            writer.WriteDoubleValue("past_due_carried_forward", PastDueCarriedForward);
            writer.WriteDateTimeOffsetValue("payment_due_date", PaymentDueDate);
            writer.WriteDoubleValue("total_due", TotalDue);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
