// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Marqeta.Core.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Offer_model : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The active property</summary>
        public bool? Active { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The campaign_token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CampaignToken { get; set; }
#nullable restore
#else
        public string CampaignToken { get; set; }
#endif
        /// <summary>The currency_code property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CurrencyCode { get; set; }
#nullable restore
#else
        public string CurrencyCode { get; set; }
#endif
        /// <summary>The end_date property</summary>
        public DateTimeOffset? EndDate { get; set; }
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The purchase_amount property</summary>
        public double? PurchaseAmount { get; set; }
        /// <summary>The reward_amount property</summary>
        public double? RewardAmount { get; set; }
        /// <summary>The reward_trigger_amount property</summary>
        public double? RewardTriggerAmount { get; set; }
        /// <summary>The start_date property</summary>
        public DateTimeOffset? StartDate { get; set; }
        /// <summary>The token property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Token { get; set; }
#nullable restore
#else
        public string Token { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Marqeta.Core.Sdk.Models.Offer_model"/> and sets the default values.
        /// </summary>
        public Offer_model()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Marqeta.Core.Sdk.Models.Offer_model"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Marqeta.Core.Sdk.Models.Offer_model CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Marqeta.Core.Sdk.Models.Offer_model();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "active", n => { Active = n.GetBoolValue(); } },
                { "campaign_token", n => { CampaignToken = n.GetStringValue(); } },
                { "currency_code", n => { CurrencyCode = n.GetStringValue(); } },
                { "end_date", n => { EndDate = n.GetDateTimeOffsetValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "purchase_amount", n => { PurchaseAmount = n.GetDoubleValue(); } },
                { "reward_amount", n => { RewardAmount = n.GetDoubleValue(); } },
                { "reward_trigger_amount", n => { RewardTriggerAmount = n.GetDoubleValue(); } },
                { "start_date", n => { StartDate = n.GetDateTimeOffsetValue(); } },
                { "token", n => { Token = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("active", Active);
            writer.WriteStringValue("campaign_token", CampaignToken);
            writer.WriteStringValue("currency_code", CurrencyCode);
            writer.WriteDateTimeOffsetValue("end_date", EndDate);
            writer.WriteStringValue("name", Name);
            writer.WriteDoubleValue("purchase_amount", PurchaseAmount);
            writer.WriteDoubleValue("reward_amount", RewardAmount);
            writer.WriteDoubleValue("reward_trigger_amount", RewardTriggerAmount);
            writer.WriteDateTimeOffsetValue("start_date", StartDate);
            writer.WriteStringValue("token", Token);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
