// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models {
    /// <summary>
    /// Contains information on a reward rule.
    /// </summary>
    public class PolicyRewardRule : IAdditionalDataHolder, IParsable 
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Contains information on the rules defined for a reward program.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PolicyRewardRuleFilters? Filters { get; set; }
#nullable restore
#else
        public PolicyRewardRuleFilters Filters { get; set; }
#endif
        /// <summary>Contains information on the outcome of a reward rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PolicyRewardRuleOutcome? Outcome { get; set; }
#nullable restore
#else
        public PolicyRewardRuleOutcome Outcome { get; set; }
#endif
        /// <summary>Type of reward rule.</summary>
        public PolicyRewardRuleType? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="PolicyRewardRule"/> and sets the default values.
        /// </summary>
        public PolicyRewardRule()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="PolicyRewardRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PolicyRewardRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PolicyRewardRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"filters", n => { Filters = n.GetObjectValue<PolicyRewardRuleFilters>(PolicyRewardRuleFilters.CreateFromDiscriminatorValue); } },
                {"outcome", n => { Outcome = n.GetObjectValue<PolicyRewardRuleOutcome>(PolicyRewardRuleOutcome.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<PolicyRewardRuleType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<PolicyRewardRuleFilters>("filters", Filters);
            writer.WriteObjectValue<PolicyRewardRuleOutcome>("outcome", Outcome);
            writer.WriteEnumValue<PolicyRewardRuleType>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
