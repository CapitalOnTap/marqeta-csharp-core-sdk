// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    #pragma warning disable CS1591
    public class Digital_service_provider : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cvm_authentication_indicator property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CvmAuthenticationIndicator { get; set; }
#nullable restore
#else
        public string CvmAuthenticationIndicator { get; set; }
#endif
        /// <summary>The cvm_authentication_method property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CvmAuthenticationMethod { get; set; }
#nullable restore
#else
        public string CvmAuthenticationMethod { get; set; }
#endif
        /// <summary>The first_authentication_factor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FirstAuthenticationFactor { get; set; }
#nullable restore
#else
        public string FirstAuthenticationFactor { get; set; }
#endif
        /// <summary>The second_authentication_factor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SecondAuthenticationFactor { get; set; }
#nullable restore
#else
        public string SecondAuthenticationFactor { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Digital_service_provider"/> and sets the default values.
        /// </summary>
        public Digital_service_provider()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Digital_service_provider"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Digital_service_provider CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Digital_service_provider();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cvm_authentication_indicator", n => { CvmAuthenticationIndicator = n.GetStringValue(); } },
                { "cvm_authentication_method", n => { CvmAuthenticationMethod = n.GetStringValue(); } },
                { "first_authentication_factor", n => { FirstAuthenticationFactor = n.GetStringValue(); } },
                { "second_authentication_factor", n => { SecondAuthenticationFactor = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("cvm_authentication_indicator", CvmAuthenticationIndicator);
            writer.WriteStringValue("cvm_authentication_method", CvmAuthenticationMethod);
            writer.WriteStringValue("first_authentication_factor", FirstAuthenticationFactor);
            writer.WriteStringValue("second_authentication_factor", SecondAuthenticationFactor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
