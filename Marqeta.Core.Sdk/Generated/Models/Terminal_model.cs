// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Marqeta.Core.Sdk.Models
{
    /// <summary>
    /// Contains information about the point of sale, including details on how the card was presented.Returned if provided by the card network, and the request uses Transaction Model v1 of the Marqeta Core API.Not returned for Transaction Model v2 requests.
    /// </summary>
    public class Terminal_model : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Indicates whether the cardholder was present during the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardholderPresence { get; set; }
#nullable restore
#else
        public string CardholderPresence { get; set; }
#endif
        /// <summary>Indicates whether the card was present during the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CardPresence { get; set; }
#nullable restore
#else
        public string CardPresence { get; set; }
#endif
        /// <summary>Indicates whether the card acceptor or terminal supports partial-approval transactions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PartialApprovalCapable { get; set; }
#nullable restore
#else
        public string PartialApprovalCapable { get; set; }
#endif
        /// <summary>Indicates whether the cardholder entered a PIN during the transaction.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PinPresent { get; set; }
#nullable restore
#else
        public string PinPresent { get; set; }
#endif
        /// <summary>Indicates a higher-risk operation, such as a quasi-cash or cryptocurrency transaction.These transactions typically involve non-financial institutions.</summary>
        public Marqeta.Core.Sdk.Models.Terminal_model_special_condition_indicator? SpecialConditionIndicator { get; set; }
        /// <summary>Card acceptor or terminal identification number.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Tid { get; set; }
#nullable restore
#else
        public string Tid { get; set; }
#endif
        /// <summary>Specifies whether the transaction was initiated by a cardholder or a merchant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransactionInitiatedBy { get; set; }
#nullable restore
#else
        public string TransactionInitiatedBy { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Marqeta.Core.Sdk.Models.Terminal_model"/> and sets the default values.
        /// </summary>
        public Terminal_model()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Marqeta.Core.Sdk.Models.Terminal_model"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Marqeta.Core.Sdk.Models.Terminal_model CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Marqeta.Core.Sdk.Models.Terminal_model();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "card_presence", n => { CardPresence = n.GetStringValue(); } },
                { "cardholder_presence", n => { CardholderPresence = n.GetStringValue(); } },
                { "partial_approval_capable", n => { PartialApprovalCapable = n.GetStringValue(); } },
                { "pin_present", n => { PinPresent = n.GetStringValue(); } },
                { "special_condition_indicator", n => { SpecialConditionIndicator = n.GetEnumValue<Marqeta.Core.Sdk.Models.Terminal_model_special_condition_indicator>(); } },
                { "tid", n => { Tid = n.GetStringValue(); } },
                { "transaction_initiated_by", n => { TransactionInitiatedBy = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("cardholder_presence", CardholderPresence);
            writer.WriteStringValue("card_presence", CardPresence);
            writer.WriteStringValue("partial_approval_capable", PartialApprovalCapable);
            writer.WriteStringValue("pin_present", PinPresent);
            writer.WriteEnumValue<Marqeta.Core.Sdk.Models.Terminal_model_special_condition_indicator>("special_condition_indicator", SpecialConditionIndicator);
            writer.WriteStringValue("tid", Tid);
            writer.WriteStringValue("transaction_initiated_by", TransactionInitiatedBy);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
